[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Reporting, Spring 2023",
    "section": "",
    "text": "Welcome\nThis book serves as a compilation of of handouts, websites and tutorials that I have used in my data reporting class at ASU’s Cronkite School of Journalism and Mass Communication. Some of the material will be useful in other courses or for self-study, but it is primarily aimed at the investigative journalism masters’ students at Cronkite.\nIt covers:\nIt doesn’t cover:\nA note on language: I’ll use the words “read” and “write” in a generic sense. I intend them to cover the range of journalistic media, including listening, watching, and news applications or graphics."
  },
  {
    "objectID": "index.html#credits",
    "href": "index.html#credits",
    "title": "Data Reporting, Spring 2023",
    "section": "Credits",
    "text": "Credits\nI’m grateful to all of the trainers, experts and collaborators who have made their training materials open to the world, and they are linked prominently throughout this book. Any errors or omissions are my own.\nThis book was written in quarto version 1.2 using RStudio and version 4.2 or R. . The complete source is available on Github.\n\n\n\n– Sarah Cohen, Winter 2022-23 sarah.h.cohen@asu.edu"
  },
  {
    "objectID": "start.html",
    "href": "start.html",
    "title": "Reporting with data",
    "section": "",
    "text": "Data reporting has come to mean many things. One of the best descriptions that fits this course is the moniker, “Empirical Journalism”. For us, that means taking a systematic approach to finding, acquiring, evaluating and analyzing all kinds of data for the purpose of uncovering information that was hidden or otherwise ill-understood by the general public. It will teach you to use documents and data as sources like any other, with flaws and motivations that might thwart or help you report a story.\nThis introductory section gives you some of the basic skills you need to begin thinking about data and digitally stored documents as sources for your stories.\nSome of the skill comes from recognizing opportunities when they arise. The chapters on defining, finding and creating data should get you thinking about the many ways information is stored, and how difficult it might be to wrangle it for your story idea.\nThe section on reading and viewing investigations teaches you how to critically look at stories that attempt to use data, and also to learn from imaginative or effective use of it. There are also sections on the bread and butter of working with data: checking your math-phobia at the door and learning to document your work so that it can be published."
  },
  {
    "objectID": "start-story.html#read-like-a-reporter",
    "href": "start-story.html#read-like-a-reporter",
    "title": "2  Learn a new way to read",
    "section": "Read like a reporter",
    "text": "Read like a reporter\nTry to approach data or empirical reporting as a reporter first, and a consumer second. The goal is to triangulate how the story was discovered, reported and constructed. You’ll want to think about why this story, told this way, at this time, was considered newsworthy enough to publish when another approach on the same topic might not have been.\n\nWhat were the questions?\nIn data journalism, we often start with a tip, or a hypothesis. Sometimes it’s a simple question. Walt Bogdanich of The New York Times is renowned for seeing stories around every corner. Bogdanich has said that the prize-winning story “A Disability Epidemic Among a Railroad’s Retirees” came from a simple question he had when railway workers went on strike over pension benefits – how much were they worth? The story led to an FBI investigation and arrests, along with pension reform at the largest commuter rail in the country. 1\nThe hypothesis for some stories might be more directed. In 2021, the Howard Center for Investigative Journalism at ASU published “Little victims everywhere”, a set of stories on the lack of justice for survivors of child sexual assault on Native American reservations. That story came after previous reporters for the center analyzed data from the Justice Department showing that the FBI dropped most of the cases it investigated, and the Justice Department then only prosecuted about half of the matters referred to it by investigators. The hypothesis was that they were rarely pursued because federal prosecutors – usually focused on immigration, white collar crime and drugs – weren’t as prepared to pursue violent crime in Indian Country.\nWhen studying a data-driven investigation, try to imagine what the reporters were trying to prove or disprove, and what they used to do it. In journalism, we rely on a mixture of quantitative and qualitative methods. It’s not enough to prove the “numbers” or have the statistical evidence. That is just the beginning of the story. We are supposed to ground-truth them with the stories of actual people and places.\n\n\nGo beyond the numbers\nIt’s easy to focus on the numbers or statistics that make up the key findings, or the reason for the story. Some reporters make the mistake of thinking all of the numbers came from the same place – a rarity in most long-form investigations. Instead, the sources have been woven together and are a mix of original research and research done by others. Try to pay attention to any sourcing done in the piece. Sometimes, it will tell you that the analysis was original. Other times it’s more subtle.\nBut don’t just look at the statistics being reported in the story. In many (most?) investigations, some of the key people, places or time elements come directly from a database.\nWhen I was analyzing some housing court data for The New York Times, one fact hit me as I was looking at a timeline of eviction cases: The most cases ever filed in one of the city’s courts happened during a Thanksgiving week one year. It was the kind of detail that could have been compelling in a story if it had been more recent.\nOften, the place that a reporter visits is determined by examples found in data. In this story on rural development funds, all of the examples came from an analysis of the database. Once the data gave us a good lead, we examined press releases and other easy-to-get sources before calling and visiting the recipients or towns."
  },
  {
    "objectID": "start-story.html#reading-tips",
    "href": "start-story.html#reading-tips",
    "title": "2  Learn a new way to read",
    "section": "Reading tips",
    "text": "Reading tips\nYou’ll get better at reading investigations and data-driven work over time, but for now, remember to go beyond the obvious:\n\nWhere might the reporters have found their key examples, and what made them good characters or illustrations of the larger issue? Could they have come from the data?\nWhat do you think came first – a narrative single example that was broadened by data , or a big idea that was illustrated with characters ?\nWhat records were used? Were they public records, leaks, or proprietary data?\nWhat methods did they use? Did they do their own testing, use statistical analysis, or geographic methods? You won’t always know, but look for a methodology section or a description alongside each story.\nHow might you localize or adapt these methods to find your own stories?\nPick out the key findings (usually in the nut graf or in a series of bullets after the opening chapter): are they controvesial? How might they have been derived? What might have been the investigative hypothesis? Have they given critics their due and tried to falsify their own work?\nHow effective is the writing and presentation of the story? What makes it compelling journalism rather than a dry study? How might you have done it differently? Is a video story better told in text, or would a text story have made a good documentary? Are the visual elements well integrated? Does the writing draw you in and keep you reading? Think about structure, story length, entry points and graphics all working together.\nAre you convinced? Are there holes or questions that didn’t get addressed?"
  },
  {
    "objectID": "start-story.html#analyze-data-for-story-not-study",
    "href": "start-story.html#analyze-data-for-story-not-study",
    "title": "2  Learn a new way to read",
    "section": "Analyze data for story, not study",
    "text": "Analyze data for story, not study\nAs journalists we’ll often be using data, social science methods and even interviewing differently than true experts. We’re seeking stories, not studies. Recognizing news in data is one of the hardest skills for less experienced reporters new to data journalism. This list of potential newsworthy data points is adapted from Paul Bradshaw’s “Data Journalism Heist”.\n\n\n\n\nCompare the claims of powerful people and institutions against facts – the classic investigative approach.\nReport on unexpected highs and lows (of change, or of some other characteristic)\nLook for outliers – individual values that buck a trend seen in the rest\nVerify or bust some myths\nFind signs of distress, happiness or dishonesty or any other emotion.\nUncover new or under-reported long-term trends.\nFind data suggesting your area is the same or different than most others of its kind.\n\nBradshaw also did a recent study of data journalism pieces: “Here are the angles journalists use most often to tell the stories in data”, in Online Journalism Blog. I’m not sure I agree, only because he’s looking mainly at visualizations rather than stories, but they’re worth considering."
  },
  {
    "objectID": "start-story.html#exercises",
    "href": "start-story.html#exercises",
    "title": "2  Learn a new way to read",
    "section": "Exercises",
    "text": "Exercises\n\nIf you’re a member of Investigative Reporters and Editors, go to the site and find a recent prize-winning entry (usually text rather than broadcast). Get a copy of the IRE contest entry from the Resources page. Try to match up what the reporters said they did and how they did it with key portions of the story.\nThe next time you find a good data source, try to find a story that references it. If your data is local, you might look for a story that used similar data elsewhere, such as 911 response times or overdose deaths. But many stories use federal datasets that can easily be localized. Look at a description of the dataset and then the story to see how the data might have been used."
  },
  {
    "objectID": "start-math.html#why-numbers",
    "href": "start-math.html#why-numbers",
    "title": "3  Newsroom math",
    "section": "Why numbers?",
    "text": "Why numbers?\nUsing averages, percentages and percent change is the bread and butter of data journalism, leading to stories ranging from home price comparisons to school reports and crime trends. It may have been charming at one time for reporters to announce that they didn’t “do” math, but no longer. Instead, it is now an announcement that the reporter can only do some of the job. You will never be able to tackle complicated, in-depth stories without reviewing basic math.\nThe good news is that most of the math and statistics you need in a newsroom isn’t nearly as difficult as high school algebra. You learned it somewhere around the 4th grade. You then had a decade to forget it before deciding you didn’t like math. But mastering this most basic arithmetic again is a requirement in the modern age.\nIn working with typical newsroom math, you will need to learn how to:\n\nOvercome your fear of numbers\nIntegrate numbers into your reporting\nRoutinely compute averages, differences and rates\nSimplify and select the right numbers for your story\n\nWhile this chapter covers general tips, you can find specific instructions for typical newsroom math in this Appendix A"
  },
  {
    "objectID": "start-math.html#overcoming-your-fear-of-math",
    "href": "start-math.html#overcoming-your-fear-of-math",
    "title": "3  Newsroom math",
    "section": "Overcoming your fear of math",
    "text": "Overcoming your fear of math\nWhen we learned to read, we got used to the idea that 26 letters in American English could be assembled into units that we understand without thinking – words, sentences, paragraphs and books. We never got the same comfort level with 10 digits, and neither did our audience.\nThink of your own reaction to seeing a page of words. Now imagine it as a page of numbers.\nInstead, picture the number “five”. It’s easy. It might be fingers or it might be a team on a basketball court. But it’s simple to understand.\nNow picture the number 275 million. It’s hard. Unfortunately, 275 billion isn’t much harder, even though it’s magnitudes larger. (A million seconds goes by in about 11 days but you may not have been alive for a billion seconds – about 36 years.)\nThe easiest way to get used to some numbers is to learn ways to cut them down to size by calculating rates, ratios or percentages. In your analysis, keep an eye out for the simplest accurate way to characterize the numbers you want to use. “Characterize” is the important word here – it’s not usually necessary to be overly precise so long as your story doesn’t hinge on a nuanced reading of small differences. (And is anything that depends on that news? It may not be.)\nHere’s one example of putting huge numbers in perspective. Pay attention to what you really can picture - it’s probably the $21 equivalent.\n\nThe Chicago hedge fund billionaire Kenneth C. Griffin, for example, earns about $68.5 million a month after taxes, according to court filings made by his wife in their divorce. He has given a total of $300,000 to groups backing Republican presidential candidates. That is a huge sum on its face, yet is the equivalent of only $21.17 for a typical American household, according to Congressional Budget Office data on after-tax income.  “Buying Power”, Nicholas Confessore, Sarah Cohen and Karen Yourish, The New York Times, October 2015\n\nI had written it a even more simply, but editors found the facts so unbelievable that they wanted give readers a chance to do the math themselves. That’s reasonable, but here’s an even simpler way to say it: “earned nearly $1 billion after taxes…He has given $300,000 to groups backing candidates, the equivalent of a dinner at Olive Garden for the typical American family , based on Congressional Budget Office income data.” (And yes, I checked the price for an Olive Garden meal at the time for four people.)"
  },
  {
    "objectID": "start-math.html#put-math-in-its-place",
    "href": "start-math.html#put-math-in-its-place",
    "title": "3  Newsroom math",
    "section": "Put math in its place",
    "text": "Put math in its place\nFor journalists, numbers – or facts – make up the third leg of a stool supported by human stories or anecdotes , and insightful comment from experts. They serve us in three ways:\n\nAs summaries. Almost by definition, a number counts something, averages something, or otherwise summarizes something. Sometimes, it does a good job, as in the average height of Americans. Sometimes it does a terrible job, as in the average income of Americans. Try to find summaries that accurately characterize the real world.\nAs opinions. Sometimes it’s an opinion derived after years of impartial study. Sometimes it’s an opinion tinged with partisan or selective choices of facts. Use them accordingly.\nAs guesses. Sometimes it’s a good guess, sometimes it’s an off-the-cuff guess. And sometimes it’s a hopeful guess. Even when everything is presumably counted many times, it’s still a (very nearly accurate) guess. Yes, the “audits” of presidential election results in several states in 2021 found a handful of errors – not a meaningful number, but a few just the same.\n\nOnce you find the humanity in your numbers, by cutting them down to size and relegating them to their proper role, you’ll find yourself less fearful. You’ll be able to characterize what you’ve learned rather than numb your readers with every number in your notebook. You may even find that finding facts on your own is fun."
  },
  {
    "objectID": "start-math.html#going-further",
    "href": "start-math.html#going-further",
    "title": "3  Newsroom math",
    "section": "Going further",
    "text": "Going further\n\nTipsheets\n\nSteve Doig’s “Math Crib Sheet”\nAppendix A: Common newsroom math, adapted from drafts of the book Numbers in the Newsroom, by Sarah Cohen.\n\n\n\nReading and viewing\n\n“Avoiding Numeric Novcain: Writing Well with Numbers,” by Chip Scanlan, Poynter.com\nT. Christian Miller’s “Writing the data-driven story”\nA viral Twitter thread:\n\n\n\nWhat happens in your head when you do 27+48?\n\n— Gene Belcher (@Wparks91) June 25, 2019"
  },
  {
    "objectID": "start-math.html#exercises",
    "href": "start-math.html#exercises",
    "title": "3  Newsroom math",
    "section": "Exercises",
    "text": "Exercises\n\nImagine that someone gave you $1 million and you could spend it on anything you want. Write down a list of things that would add up to about that amount. That should be easy. Now, imagine someone gave you $1 billion and you could spend it on whatever you want, but anything left over after a year had to be returned. How would you spend it? (You can give away money, but it can’t be more than 50% of a charity’s annual revenues. So you can’t give 10 $100 million gifts!) See how far you get trying to spend it. A few homes, a few yachts, student loan repayments for all of your friends? You’ve hardly gotten started.\nImagine it is Jan. 1, 2020 and you are tasked with writing the annual weather story, summarizing the high and low points of the previous year. Using this daily summary of temperatures, rain and wind for Phoenix, try to find three interesting facts for your story. If you want to download your own data from NOAA, choose “Local Climatalogical Data,” and keep only the rows that refer to “SOD,” or “Summary of Day”."
  },
  {
    "objectID": "start-data-def.html#the-birth-of-a-dataset",
    "href": "start-data-def.html#the-birth-of-a-dataset",
    "title": "4  Defining “Data”",
    "section": "The birth of a dataset",
    "text": "The birth of a dataset\nMost journalism uses data collected for one purpose for something entirely different. Understanding its original uses – what matters to the people who collected it, and what doesn’t – will profoundly affect its accuracy or usefulness.\n\nTrace data and administrative records\nIn “The Art of Access”, David Cullier and Charles N. Davis describe a process of tracking down the life and times of a dataset. Their purpose is to make sure they know how to request it from a government agency. The same idea applies to using data that we acquire elsewhere.\nUnderstanding how and why data exists is crucial to understanding what you, as a reporter, might do with it.\nAnything you can systematically search or analyze could be considered one piece of of data. As reporters, we usually deal with data that was created in the process of doing something else – conducting an inspection, delivering a tweet, or scoring a musical. In the sciences, this flotsam and jetsom that is left behind is called “digital trace data” if it was born digitally.\nIn journalism and in the social sciences, many of our data sources were created by a government process. It might be a safety inspection, a traffic ticket, or the filing of a death certificate. These administrative records form the basis of much investigative reporting and they are often the subject of public records and FOIA requests. They were born as part of the government doing its job, without any thought given to how it might be used in another way. In the sciences, those are often called “administrative records”.\nThis trace data might be considered the first part of the definition above – information that can be stored and used.\nHere’s how Chris Bail from Duke University describes it:\n\n\n\n\nData collected and curated for analysis\nAnother kind of data is that which is compiled or collected specifically for the purpose of studying something. It might collected in the form of a survey or a poll, or it might be a system of sampling to measure pollution or weather. But it’s there because the information has intrinsic value AS information.\nThe video suggests a hard line between trace data and custom data. In practice, it’s not that clear. Many newsrooms may curate data published in other sources or in administrative records, such as the Washington Post’s police shooting dataset. In other cases, the agencies we are covering get already-compiled data from state and local governments or companies they regulate.\nThis type of data might be considered the second type in the definition – tabular information that is used for decision-making."
  },
  {
    "objectID": "start-data-def.html#granular-and-aggregated-data",
    "href": "start-data-def.html#granular-and-aggregated-data",
    "title": "4  Defining “Data”",
    "section": "Granular and aggregated data",
    "text": "Granular and aggregated data\nOne of the hardest concepts for a lot of new data journalists is the idea of granularity of your data source. There are a lot of ways to think about this: individual items in a list vs. figures in a table; original records vs. compilations; granular data vs. statistics.\nGenerally, an investigative reporter is interested in getting data that is as close as possible to the most granular information that exists, at least on computer files. Here’s an example , which might give you a little intuition about why it’s so important to think this way:\nWhen someone dies in the US, a standard death certificate is filled out by a series of officials - the attending physician, the institution where they died and even the funeral direcor.\n\n\n\ndeath certificate\n\n\nHere is a blank version of the standard US death certificate form – notice the detail and the detailed instructions on how it is supposed to be filled out. 2\nA good reporter could imagine many stories coming out of these little boxes. Limiting yourself to just to COVID-19-related stories: You could profile the local doctor who signed the most COVID-19-related death certificates in their city, or examine the number of deaths that had COVID as a contributing, but not underlying or immediate, cause of death. You could compare smoking rates in the city with the number of decedents whose tobacco use likely contributed to their death. Maybe you’d want to know how long patients suffered with the disease before they died. And you could map the deaths to find the block in your town most devastated by the virus.\nEarly in the pandemic, Coulter Jones and Jon Kamp of the Wall Street Journal examined the records from one of the few states that makes them public, and concluded that “Coronavirus Deaths were Likely Missed in Michigan, Death Certificates Suggest”\nBut you probably can’t do that. The reason is that, in most states, death certificates are not public records and are treated as secrets. 3. Instead, state and local governments provide limited statistics related to the deaths, usually by county, with no detail. Here’s an example from Arizona — note that we can only see statistics in the way the data source has decided we want to examine them, without access to the underlying information. There’s no way to look at age and race and gender combined for each county, just the generalized statistics for each category alone.\n\nThat’s the difference between granular data and aggregate data. Here are some of the typical (not universal) characteristics of each:\n\n\n\n\n\n\n\nGranular\nAggregate\n\n\n\n\nIntended for some purpose other than your work\nIntended to be presented as is to the public\n\n\nMany rows (records), few columns (variables)\nMany columns (variables), few rows (records)\n\n\nRequires a good understanding of the source\nExplanatory notes usually come with the data\n\n\nEasy to cross-reference and compile\nOften impossible to repurpose\n\n\nHas few numeric columns\nMay be almost entirely numerical\n\n\nIs intended for use in a database\nIs intended for use in a spreadsheet\n\n\n\nWe often have to consider the trade-offs. Granular data with the detail we need - especially when it involves personally identifiable information like names and addresses - can take months or years of negotiation over public records requests, even when the law allows it. It’s often much easier to convince an agency to provide summarized or incomplete data. Don’t balk at using it if it works for you. But understand that in the vast majority of cases, it’s been summarized in a way that’s lost information that could be important to your story."
  },
  {
    "objectID": "start-data-def.html#nouns",
    "href": "start-data-def.html#nouns",
    "title": "4  Defining “Data”",
    "section": "Nouns",
    "text": "Nouns\nThat brings us to one of the most important things you must find out about any data you begin to analyze: What “noun” does each row in a tabular dataset represent? In statistics, they might be called observations or cases. In data science, they’re usually called records. Either way, every row must represent the same thing – a person, a place, a year, a water sample or a school. And you can’t really do anything with it until you figure out what that is.\nIn 2015, we did a story at The New York Times called “More Deportation Follow Minor Crimes, Records Show” . The government had claimed it was only removing hardened criminals from the country, but our analysis of the data suggested that many of them were for minor infractions.\nIn writing the piece, we had to work around a problem in our data: the agency refused to provide us anything that would help us distinguish individuals from one another. All we knew was that each row represented one deportation – not one person! Without a column, or field or a variable or an attribute for an individual – say, name and date of birth, or some scrambled version of an their DHS number – we had no way to even estimate how often people were deported multiple times. If you read the story, you’ll see the very careful wording, except when we had reported out and spoken to people on the ground."
  },
  {
    "objectID": "start-data-def.html#further-reading",
    "href": "start-data-def.html#further-reading",
    "title": "4  Defining “Data”",
    "section": "Further reading",
    "text": "Further reading\n\n“Basic steps in working with data”, the Data Journalism Handbook, Steve Doig, ASU Professor. He describes in this piece the problem of not knowing exactly how the data was compiled.\n“Counting the Infected” , Rob Gebellof on The Daily, July 8, 2020.\n“Spreadsheet thinking vs. Database thinking”, by Robert Kosara, gets at the idea that looking at individual items is often a “database”, and statistical compilations are often “spreadsheets”.\n“Tidy Data”, in the Journal of Statistical Software (linked here in a pre-print) by Hadley Wickham , is the quintessential article on describing what we think of as “clean” data. For our purposes, much of what he describes as “tidy” comes when we have individual, granular records – not statistical compilations. It’s an academic article, but it has the underlying concepts that we’ll be working with all year."
  },
  {
    "objectID": "start-data-def.html#exercises",
    "href": "start-data-def.html#exercises",
    "title": "4  Defining “Data”",
    "section": "Exercises",
    "text": "Exercises\n\nGet a copy of a parking ticket from your local government, and try to imagine what a database of those would look like. What would every row represent? What would every column represent? What’s missing that you would expect to find, and what is included that surprises you?\nThe next time you get a government statistical report, scour all of the footnotes to find some explanation of where the data came from. You’ll be surprised how often they are compilations of administrative records - the government version of trace data."
  },
  {
    "objectID": "start-data-diary.html#replication-and-the-data-diary",
    "href": "start-data-diary.html#replication-and-the-data-diary",
    "title": "5  Replication and the data diary",
    "section": "Replication and the data diary",
    "text": "Replication and the data diary\nThe formal processes used by AP might not work for smaller endeavors, but anyone can put the underlying ideas to work. At the Center for Public Integrity, Talia Buford, now at ProPublica, kept a simple Word document with her questions and code annotated to help her repeat her work. That “data diary” served as a backstop and roadmap for fact-checking.\nYour analysis and the way it’s characterized in publication must be demonstrably accurate. That means understanding exactly what you did, why, where it all is and how it should be communicated to a general audience. If you can’t describe exactly where the data came from, what you did to derive your findings, and where to find it all, it simply shouldn’t be published.\n\nThink of the data work the same way you think about interview notes or transcripts and any other research for a story. You wouldn’t quote a court case without reading it and probably talking to some of the participants. You’d make sure you know where to find the documents and what people say about them. You will consult those documents during your fact-checking. All data work – even the most short-lived – should be documented in at least the same detail. Ideally, someone reading through your notes would be able to repeat your work and understand what it means.\nYou also don’t want your future self to curse your present self. It is very likely you’ll have to drop the work at some point as other stories become more urgent and return to it months later. You should be able to pick up where you left off after briefly refreshing yourself on your work.\nThere are disagreements among reporters about how much to try to make our work replicable just as scientists do. Matt Waite’s rant on the subject prompted me to write a rebuttal. The right answer is probably somewhere in between."
  },
  {
    "objectID": "start-data-diary.html#first-steps-in-documentation",
    "href": "start-data-diary.html#first-steps-in-documentation",
    "title": "5  Replication and the data diary",
    "section": "First steps in documentation",
    "text": "First steps in documentation\nAnyone who has taken a hard sciences or computer programming class in school probably had to maintain a lab notebook. Your data diary is the same idea – a running list of sources and steps taken to get to the final answers.\nStart the documentation process before you even open a new dataset. For a quick daily story, you might be able to keep your work in one short document or as a page in a spreadsheet file. For a longer project, you may find it easier to break your documents apart into logical pieces. Most computer languages are self-documenting – they write out the steps taken. A data diary may not be necessary when a programming language is combined with narrative as in Jupyter Notebooks in Python or Quarto / R Markdown documents in R.\nWhether doing it alongside computer code or in a separate document, here are some sections that are worth considering whenever you start a story or project.\n\nData sourcing\n\nThe source of YOUR data, and how you know it’s authentic. Be specific. And don’t pretend you got it from the original source when you found it elsewhere, such as in this textbook or in a Github repository.\nDescribe the original source of the data and how it is collected and released.2\nIn a separate set of notes, reference other stories and studies that use this or similar data. Include interview notes, advice, warnings and findings along with stories that have already been done.\nIdentify alternative sources for this and similar or related datasets or documents.\nSpecifically write down where you have stored all of this and how you have organized your work. You want to make sure you can get back to the latest version easily, and that you have all of the supporting documents you need to check it.\n\n\n\nData documentation and flaws 3\n\nBe sure to include links or copies of any original documentation such as a record layout, data dictionary4 or manual. If there isn’t one, consider making a data dictionary with what you’ve learned.\nDocument the ways you checked the integrity of the data. There are many ways it might be inaccurate. Try to reconcile the number of rows and any totals you can produce to match other reports created by the source, or other reports that have used it. On longer stories, you’ll also check for impossible combinations (10-year-olds with DUIs), missing data, improper importing or exporting of dates, among other things. (We’ll come back to this.)\nRecord any questions (and answers as you get them) about the meaning of fields or the scope of the data.\nDocument decisions you’ve made about the scope or method of your analysis. For example, if you want to look at “serious” crimes, describe how and why you categorized each crime as “serious” or “not serious.” Some of these should be vetted by experts or should be verified by documenting industry standards.\nInclude a list of interviews conducted / questions asked of officials and what they said.\n\n\n\nProcessing notes 5\nSome projects require many steps to get to a dataset that can be analyzed. You may have had to scrape the data, combine it with other sources or fix some entries. Some common elements you should document:\n\nHand-made corrections. Try to list every one, but it’s ok if you describe HOW you did it, such as clustering and hand-entering using OpenRefine. Link to any spreadsheet, document or program you used. Just be sure to always work on a copy of the data.\nGeocoding (affixing geographic coordinates to addresses). Note how many were correct, how many missing, and what you did about it.\nA description of how you got messy data into a tabular form or a form suitable for analysis. For example, you may have had to strip headings or flip a spreadsheet on its head. Make sure to write down how you did that.\n\n\n\nThe good part: Your analysis\n\nEach question you asked of your data, and the steps you took to answer it. If you use programming notebooks, write it out in plain language before or after the query or statements.\nVetting of your answers: who has looked them over, commented on them\nWhy they might be wrong."
  },
  {
    "objectID": "start-data-diary.html#examples-of-documentation",
    "href": "start-data-diary.html#examples-of-documentation",
    "title": "5  Replication and the data diary",
    "section": "Examples of documentation",
    "text": "Examples of documentation\n\nA published Jupyter notebook for an analysis of FEC enforcement actions from the Los Angeles Times’ data desk. Ben Welsh, the author of that notebook, says that there are previous versions with unpublishable work.\nA 2018 Buzzfeed News repo with start-to-finish documentation of an opioid deaths story.\nOne year, I created a dataset for practice in class that contained information on population changes in Arizona counties. It turned out not to be an awesome exercise, but I created an example data diary to go with it that is more instructive than the data itself.\nData cleaning will come up a lot in the future, but it’s closely intertwined with documenting your work. Here’s an email exchange between me and Craig Silverman, now at ProPublica, about the process I used at The New York Times in reporting and fact-checking. This isn’t the same as a process for replication, but it discusses the kinds of things that should be in it."
  },
  {
    "objectID": "start-hunt.html#an-example-news21-hate-in-america",
    "href": "start-hunt.html#an-example-news21-hate-in-america",
    "title": "6  Finding the right data for your story",
    "section": "An example: News21 “Hate in America”",
    "text": "An example: News21 “Hate in America”\n\n\n\n\nIn 2018, News 21 – the multi-university investigative reporting fellowship hosted by ASU’s Cronkite School of Journalism – chose “Hate in America” as its topic for the year. It was a risk because others had been reporting on the subject for more than a year, making it more difficult for News 21 to break new ground. It was also difficult because it became clear quite quickly that no one had documented every case of hate crimes or hate-driven incidents in the U.S.\n\nData News 21 used\nThat meant that the team had to find some creative way to quantify the problem. Some of the sources they used included:\n\nRaw data from the National Crime Victimization Survey, an annual survey of crime victims that asks whether hate was an element of the crime. Reporters Catherine Devine and Allie Bice could have used data from a report produced by the Justice Department, but instead analyzed the raw data in a new way to show that about twice as many incidents may have been motivated by hate than previously acknowledged. That analysis was thoroughly vetted by experts in the survey, in hate crimes, and in criminology. It also created a structure around the entire package and provided a newsy lead to the overview story\nA database created by a team of reporters who monitored two weeks’ of social media activity from users associated with white nationalists, new-Nazis and other far-right groups on sites including Twitter, Facebook, Gab and VK. It enabled Kia Gardener to write:\n\n\nNews 21 monitored the daily social media activity of various far-right users, including white nationalists and neo-Nazis, from June 10 to June 24. Those tracked had more than 3 million followers combined. Reporters recorded and compiled more than 2,500 posts on popular platforms, such as Twitter and Facebook, and emerging social media platforms, including Gab and VK.\n\n\nAbout half the posts were directed at specific demographics or communities, from black Americans and Latinos to Jewish people and LGBTQ members….\n\n\n– Social Media: Where voices of hate find a place to preach, News 21, August 2018\n\n\nFederal prosecutions of hate crimes under the various federal statutes. Reporter Lenny Martinez scraped all of the Justice Department’s hate crime-related press releases to find cases the government bragged about. Those cases were supplemented by a list of cases extracted from Westlaw federal case database. The team logged each case in a Google sheet to show what kinds of incidents were pursued by federal prosecutors, and where.\nProPublica’s “Documenting Hate” project, which, with the Southern Poverty Law Center, tried to compile as many stories as they could about hate incidents. ProPublica’s database was a tip sheet, not a quantification. But it served one key goal of any data source: a source reporters could consult when seeking specific types of examples in specific locations.\nThe FBI Uniform Crime Report’s Hate Crime series. They quickly learned that the data is seriously flawed because of non-response from local police departments and a squishy definition of what should be included. Another flaw was that others, including ProPublica, had thoroughly reported on those flaws and the trends in the data, meaning it failed the test of newsworthiness.\n\n\n\nData the team didn’t use\nThere were also sources that the team considered but didn’t pursue, sometimes because of the difficulty and sometimes because they were less useful to the project than expected:\n\nThe Justice Department’s U.S. attorney case management system, which provided details on cases that the government chose not to pursue along with those they did. (A subsequent analysis showed that the vast majority of these cases were rejected by prosecutors, but vetting the analysis proved too difficult in the time available.)\nDatabases of graffiti maintained by local police departments. This would have required public records requests to each department for records that usually aren’t clearly public. The team also contacted Google and other companies that publish street level images to see if it would be possible to isolate the hate symbols. Companies declined release images that their users had flagged as offensive.\nHistorical questions from the Roper Center for Public Opinion Research and the General Social Survey that might have shed light on attitudes about race and religion over time. These proved to be difficult to match up over the years and didn’t really provide much insight.\n\nThese are just some of the ways the News 21 team looked far and wide for any sources that could be methodically used to document their stories. As with any project of this type, the search often failed but along the way the whole team learned more and more about the topic and got to know experts in a way they wouldn’t have if they were just seeking quotes."
  },
  {
    "objectID": "start-hunt.html#finding-data-and-documents",
    "href": "start-hunt.html#finding-data-and-documents",
    "title": "6  Finding the right data for your story",
    "section": "Finding data and documents",
    "text": "Finding data and documents\nA big part of data reporting is finding, creating or acquiring records you can use electronically.\nSome sources of readily available data could include:\n\nGovernment agencies and open government sites\nHobbyists and interest groups\nData aggregators and data collectors\nAcademic researchers who might share their data\nMicrodata from surveys and some government programs, such as the Census, Medicare, the General Social Survey and several other standard sites.\nSocial data through API’s from Spotify, Twitter and other services.\nDetails scraped from online data sources that aren’t available in bulk.\n\nThere are also more difficult ways to find data:\n\nPublic records requests\nWhistleblower leaks\nHome made databases created from documents, and free text or image document collections.\nResponses to a survey that you conduct yourself.\nYour own testing on issues such as water quality or soil contamination.\n\nWhen you start on a project, you’ll usually rely on experts and advocates to lead you to a lot of the possible data sources. But you can also use these strategies to troll for interesting datasets that might make for good stories or practice.\nListen to any caveats and warnings. You may decide that they’re not important, but you don’t want to be blindsided by them in the end. And be sure to ask what they would do if they were you – often, people who have expertise in data have story or project ideas that they can’t get funded or approved, and would be happy for someone else to do them.\nWhen you search using Google, try to use the advanced commands to more precisely hit your target. This tipsheet goes through all of the Google advanced search operators. It changes a lot.\n\nGovernment agency sites\nTry to guess what government agencies – state, local and federal – have an interest in your topic. Browse through their websites to find “Publications” or “Data and research”, or any searchable database. You’ll often find downloadable data there. Once you learn more, you can also evaluate how hard it will be to scrape the data you want. Don’t limit yourself to the jurisdications you care about. If one city or state has a good dataset, there is a strong chance that your local government will have the same thing.\nLook at federal agency sites to find a least common denominator database – they are usually compiled from more detailed state or local reports.\nEven if you can’t find the database, you might be able to find the name of a datset that is maintained internally in audits, footnotes of reports, or IT initiatives.\nOnce you know a good agency to search, use advanced Google searches for filetype:csv or filetype:xlsx, and limit the site to an agency or city site to bring up datasets that they are letting users download.\n\n\nNews reports\nOne of the most useful sources to find the names of databases and their original sources is news reports that relied on the data, or refers to a data source quoted by experts. It doesn’t matter if you’re looking at your own area or others – most places have the same kinds of information collected and stories are similar across geographic areas.\nYou should get good at using all of the resources as precisely as you can. That means getting very familiar with advanced searching in Google, and using LexisNexis and other news databases provided by the ASU library. These offer much more targeted searching than the usual Google search, and will result in much more on-point stories. When you find a good story, consider logging it in a spreadsheet or in doc, and identify:\n\nWho wrote it and when\nWhat government sources of data are explicitly mentioned.\nWhat analysis of that data was done by the news outlet, or what research it depended on.\nAny terms of art that seem to be used around your topic. For example, hate crimes are more frequently referred to as “bias” crimes in many articles – searching for “hate” might not surface them.\n\n\nIRE.org tipsheets\nAnother source for information on news stories that used data reporting is IRE, which has two ways to search for more details: the ire.org tip sheets and story archive. Log into IRE.org and choose the tipsheets to look for guides from other reporters; choose the story database to look for stories on your general topic and then click into the form that the reporters filled out that go through their sources. You’ll often find a pair of them – a story, and a tip sheet – that were done by the same person the same year.\n(The database library is currently undergoing some review, so a lot of the data listed there could be out of date. But it might also point you to standard sources for data.)\n\n\n\nAcademic articles\nMake sure to do a Google Scholar search for your topic. You will often find one or two researchers who have delved into your subject or a single source. This is often a great shortcut. For example, in the News 21 example, a search of hate crimes in Google Scholar identified an article called “Documenting Hate Crimes in the United States: Some consideration on data sources,” from APA PsycNet. Although this was specifically about sexual orientation and gender diversity, it cataloged the different ways that scholars try to document bias crimes. Once Devine settled on the crime victimization survey, another Google scholar search surfaced an expert on the survey who wrote about how it had changed over the years. He turned out to be the former chief of the Justice Department section that ran the survey, and was one of the project’s best sources. Another source led her to the book, “Statistics for Criminology and Criminal Justice.” One of the authors of that book also provided advice.\nAnother value of this approach is that it will help you find the technical jargon for the topic you’re studying. It’s often very difficult to do literature searches without knowing that term.\n\n\nThink tanks / interest groups\nTry to find some interest groups that care a lot about your topic on all sides. They often have websites with recent research on your topic and might have experts you can consult. Take their advice cautiously because they often have a point to prove and are unabashed about twisting data to make their point. However, you can often use their raw data to draw your own conclusions. Some news organizations frown on this, so be sure to be transparent about who they are and what they’ve done.\nAnother good way to use interest groups and think tanks is to get initial versions of public records from them while you wait for your own requests to be processed. At The Washington Post, we used an old version of a weapons trace database for a year while we fought the government for our own; we also used a copy of Agriculture subsidies acquired by the Environmental Working Group while we were waiting for our own public records requests to be completed.\nSometimes, gathering the Tweets from advocates can provide a rich dataset, and it’s relatively easy to do. For example, I once used the Twitter posts from the Police Misconduct project out of the Cato Institute to get a list of all of the stories they’d compiled on the topic.\n\n\nData collectors\nSeveral sites are trying to make businesses out of collected and maintaining databases. Others make available data that they have collected in the past.\nBe sure to look at the original source for any data you find there. You wouldn’t say a news article came from Google News or Lexis, and you wouldn’t say a dataset came from Google Data Search. If it’s not documented at all, you might have to contact the owner for more detail.\nBe careful of most of these. They’re often old, undocumented and poorly vetted. But they will give you a sense of what you might be able to get from a more reliable source, or give you ideas for your own data collection effort.\n*data.world** wants to be the Facebook or Instagram of data. It has both private and public accounts, and users upload data they want to share. This means it’s as varied as the people who are in it.\nIf your newsroom is an AP member, you might have access to its data.world feed, which contains its curated and documented data that local newsrooms can use for their own stories. Some reporters also use data.world to store their public records. Some government agencies are posting their data directly to data.world. But in other cases, they’re undocumented hobbyists.\nVet these the same way you would Google results.\n*Journalists’ sites** You can often find individual journalists or journalism organizations in various sharing sites, including Github (which doesn’t show up in default Google searches), data.world and other versioning. Look through their sites to see what they have collected – it’s there to share. Fivethirtyeight, ProPublica and the Los Angeles Times have particularly active data archives.\n*Google data search** is, well, the Google of data. In general, data search has limited sources and is more and more frequently logging data sets that are posted by state and local government sources.\nIt makes no attempt to curate the search, though, so be cautious when you find something.\nOne use for the dataset search is to see what other cities and counties have voluntarily released. When you see that, it often means your local or state government might have similar data you can request.\nFor example, searching for police shootings brings up a dataset released by the Orlando Police Department, which contains far more detail than the same dataset released by Phoenix in 2018:\n\n\n\norlando pd\n\n\nBe sure to look for different terms meaning the same thing. For example, searching “use of force” brings you to completely different sets of data than “police shootings”."
  },
  {
    "objectID": "start-hunt.html#vetting-data-provenance",
    "href": "start-hunt.html#vetting-data-provenance",
    "title": "6  Finding the right data for your story",
    "section": "Vetting data provenance",
    "text": "Vetting data provenance\nBefore you even open a dataset, you should know how your dataset was collected, who it originally came from and how current it is. A future chapter will go through many of the ways reporters check data they’ve found for completeness, mistakes or other problems.\nAt first blush, look for anything that precludes using the data because you can’t identify who is responsible for it or how it was collected. This is the same basic vetting you’d do on any source you hope to use.\nLook for:\n\nThe original source. If you are getting it from a secondary source, look to see how hard it will be to get from original. If it’s from a secondary source, how reliable is it? Are you going to be comfortable crediting them for the data? If you can’t identify where or how the data was collected, you probably can’t use it.\nHow others have used it and what criticisms were made of that use.\nThe timeliness of the data. Anything more than two or three years old will be effectively useless for a news article. If it’s old, you should have a plan for how it will be updated.\nData definitions, data dictionaries or record layouts. These are maps to the underlying data, and those definitions can prove difficult to understand."
  },
  {
    "objectID": "start-build-own.html#the-evolution-of-a-home-made-database",
    "href": "start-build-own.html#the-evolution-of-a-home-made-database",
    "title": "7  Build your own database",
    "section": "The evolution of a home-made database",
    "text": "The evolution of a home-made database\nThe day in December 2015 that a San Bernadino couple killed 14 people, The New York Times published a short story called “How Often Do Mass Shootings Occur? On Average, Every Day, Records Show”.\nThat daily story spurred the Times to embark on a project to document each mass shooting in America for a year. Five months later, it published this story:\n\n\nHere is how Sharon LaFraniere, Daniela Porat and Agustin Armendariz described the results of their work about 10 paragraphs into the story. (I suggest you also read the lede on your own - it’s an exquisite example of framing a lede anecdote with detail and context.)\n\nSeeking deeper insight into the phenomenon, The New York Times identified and analyzed these 358 shootings with four or more casualties, drawing on two databases assembled from news reports and citizen contributors, and then verifying details with law enforcement agencies.\nOnly a small handful were high-profile mass shootings like those in South Carolina and Oregon. The rest are a pencil sketch of everyday America at its most violent.\nThey chronicle how easily lives are shattered when a firearm is readily available — in a waistband, a glove compartment, a mailbox or garbage can that serves as a gang’s gun locker. They document the mayhem spawned by the most banal of offenses: a push in a bar, a Facebook taunt, the wrong choice of music at a house party. They tally scores of unfortunates in the wrong place at the wrong time: an 11-month-old clinging to his mother’s hip, shot as she prepared to load him into a car; a 77-year-old church deacon, killed by a stray bullet while watching television on his couch.\nThe shootings took place everywhere, but mostly outdoors: at neighborhood barbecues, family reunions, music festivals, basketball tournaments, movie theaters, housing project courtyards, Sweet 16 parties, public parks. Where motives could be gleaned, roughly half involved or suggested crime or gang activity. Arguments that spun out of control accounted for most other shootings, followed by acts of domestic violence.\nThe typical victim was a man between 18 and 30, but more than 1 in 10 were 17 or younger. Less is known about those who pulled the triggers because nearly half of the cases remain unsolved. But of those arrested or identified as suspects, the average age was 27.\nMost of the shootings occurred in economically downtrodden neighborhoods. These shootings, by and large, are not a middle-class phenomenon.\nThe divide is racial as well. Among the cases examined by The Times were 39 domestic violence shootings, and they largely involved white attackers and victims. So did many of the high-profile massacres, including a wild shootout between Texas biker gangs that left nine people dead and 18 wounded.\nOver all, though, nearly three-fourths of victims and suspected assailants whose race could be identified were black. Some experts suggest that helps explain why the drumbeat of dead and wounded does not inspire more outrage.\n\nNotice how the authors weave the details that were chronicled in their database with the data points. Now, try to imagine how their dataset might have been organized to allow for such a rich description of the phenomenon.\nThe database, built by Armendariz, and mostly reported by Porat, was designed to anticipate this writing phase:\n\nThe database was split into two separate tables – one that detailed the 358 events and another that detailed the 1,592 victims.\nIt included links to original FOIA requests and documentation they’d need for fact-checking.\nSome columns were categories or items that would be summarized – the ages and ethnicity of the victims, the severity of the injury, and whether it was solved. But much of the data included was detailed descriptions that could be searched using sophisticated filters. Still others were tagged with one-word descriptions that allowed the reporters to pluck just the right examples for just the right part of the story, using words like “suspected gang”, “child”, or “party”. Over time, these tags were reviewed and revised, which is common on small databases like this.\nFact-checking and information for publication was included in the database. For example, the database logged photos, interview and contact notes, and specific entries for name spelling and fact checks. That way the reporters could focus on what was NOT ready for publication, rather than review things they’d already checked.\n\nWhat didn’t they do?\nThey didn’t bother to standardize names and addresses into their pieces – they had no interest in counting how many “Smith”s were in the database, and didn’t care how often they occurred a Main Street.\nIn other contexts, these fields might be important, but they were only required for filtering and sorting, not for counting. There was no reason to make it more difficult to fill out the database than necessary.\nThey also didn’t try to publish the full dataset. That’s an important consideration, especially if the data you are collecting contains sensitive or potentially erroneous information. Getting it to that level of accuracy might have added several months to the project, and probably would not have served readers any better. (The bare bones list of cases, with a few exceptions, was already available and updated elsewhere.)"
  },
  {
    "objectID": "start-build-own.html#when-to-build-your-own-database",
    "href": "start-build-own.html#when-to-build-your-own-database",
    "title": "7  Build your own database",
    "section": "When to build your own database",
    "text": "When to build your own database\nThere are a few common reasons to design and build your own data for stories:\n\nThere is a long-running story that is periodically updated with new documents or events that you want to track.\nOne reporter created a spreadsheet to log each event related to Jack Kevorkian, a doctor who became famous for helping people commmit suicide. His list made it easy for him to write a story every time another person died, because he had the full list of people and circumstances and knew what he’d already fact-checked.\nMy first data-driven set of stories came from following the actions of George Steinbrenner, the former principle owner of the New York Yankees, whose family owned a failing shipbuilding company in Tampa in the early 1990s. After I pressed the “sort” button, I discovered that each time he helped the company gain new Navy contracts by lending it money, he demanded repayment as soon as the contract was signed, sending it back into a downward spiral.\nYou are getting information from disparate sources and you need an easy way to search them, arrange them chronologically, and keep track of what you need to verify. Examples include reviewing court cases across jurisdictions or compiling death records from many medical examiners’ officers. This would also work for tracking your own FOIA requests. You’ve read about this in Michael Berens’ story of a serial killer in Illinois.\nYou want to fill in details for every item on a list, like the mass shootings story above. This is quite common – you might have a list of opioid overdose deaths from the medical examiner, but you want to fill out the details of this case. At USA Today, Anthony DeBarros did this after 9/11 to tell the story of every person killed in the World Trade Center, including where they were when the planes hit."
  },
  {
    "objectID": "start-build-own.html#tools-for-building-databases",
    "href": "start-build-own.html#tools-for-building-databases",
    "title": "7  Build your own database",
    "section": "Tools for building databases",
    "text": "Tools for building databases\nThe simplest tool for a one-table database is just Google Sheets or Excel. In both Google and Microsoft 365, it’s possible to create a data entry form that will feed into a form, so you can make it a little more structured than just a free-form spreadsheet. But when it gets a little more complicated or you want more control over the data types and choices, you might choose to use a different product.\nAirtable is one option (ASU has an enterprise account, which will kick in when you create an account with your school email address). More recently, Microsoft created “Lists” to your 365 account, and Google added “Tables” to your Google account. Airtable and Tables are quite limited in the free edition – so limited that you may find it doesn’t meet your needs. But even if you can’t use it for your full dataset, it might be useful as a sandbox for you to test different ways to set up your dataset.\nThese products let you set up related tables, such as the events events and people tables used in the Times story, and create tags or other structured items for you spreadsheet. They’re also good for working in teams."
  },
  {
    "objectID": "start-build-own.html#how-to-start",
    "href": "start-build-own.html#how-to-start",
    "title": "7  Build your own database",
    "section": "How to start",
    "text": "How to start\nWork with everyone who might use the dataset before you start to set out goals. Think about the full range of issues that might come up. Most importantly, how are you going to get the information and how long will it take? Is it just a list of things in chronological order or to provide a quick overview of your reporting? Or are you trying to count specific types of events, such as police shootings by race or gender or the lawyer who has had the most disciplinary actions taken?\nThe difference is whether you are primarily using your dataset for sorting and filtering versus grouping and counting by category.\nYou should also assume that you won’t be able to get all of the information you’d hoped, and that real life doesn’t often fit into neat rectangular boxes. So it’s fine to put in some aspirational columns in case you can get the details, but be sure to stay realistic. If it takes too long to fill out a row in your database, you won’t do it.\nHere are some other considerations:\n\nTry to find an interest group or academic researcher who has already tried to tally the information you’re collecting. They may have good structures that you can adapt to your project. If you can’t, try to find a standard that you want to measure your results against – was a policy followed or not, or was a case solved or not? These are the key statistics that will identify the newsworthiness of your results.\nCarefully define your “universe”. In the case of the Washington Post’s Pulitzer Prize-winning “Fatal Flaws” series on deadly police shootings, the reporters chose to focus only on deaths that were the result of gun discharges in the line of duty. That means they aren’t able to talk about all of the people killed by police, nor all of the people killed in custody, because some happen off hours and others are strangulations or other causes of death. In other cases, you may choose to FOIA the top 50 cities or counties and ignore all the rest. It’s ok to limit your universe. Just be sure that your entire team knows and agrees to the definitions and the limits that places on the results.\nWhat is your unit of analysis, or the noun you use to describe a row in your database? Do you want to count events, people, cases, years, or something else? If so, you should have one and only one row for each of those things, which may mean splitting your work inot more than one data frame or table, the way the Times reporters did for people and events.\nBuild your data dictionary before you start filling out the database, and keep adjusting it as you have to adapt to the real world. Make sure to include a detailed data type (eg, a list separated by semicolons, long text, category, number, date….), and list any standardized words or codes you plan to use (“Y” or “N” for yes and no, for example) .\nReduce the number of columns by smartly combining categories into tags, and considering the way you’ll use a field. For example, sorting by street name isn’t usually very useful (especially when you can filter for it), so there may be no reason to split the street number, name, etc. into different columns. If you enter names in a standard format (eg, Last, First Middle Suffix), then they’re easy to split later on but can be kept in one column and still be sorted. In other words, consider whether you want to be able to sort, filter or count entries. Each of them requires a different level of standardization.\nAnticipate errors. One of the more common problems in creating your own dataset is that the whole purpose of it is to sort or arrange it by date, so you have to enter dates properly. But we rarely do get the exact date for every item in the list. There are several strategies for this, such as entering year, month and day in different columns; or entering an approximate date, and flagging it as “approximate” in a separate field (my preference).\nBuild in fact-checking. If nothing else, be sure to include the source of the information in the row, and provide a way to get back to the original quickly. For example, if you are typing in events from a court case, enter a link to the case folder in one field, and the page number of the item you’re entering in another. If I’m publishing anything from the dataset, I include columns for name checks, fact checks and even whether the narrative has been copy edited.\nHow many columns do you really want? On a spreadsheet, things can bet pretty unwieldy pretty fast. Try to avoid having more than about 15 columns, and try to define them so that most are filled out.\n\nThis is an example of a spreadsheet created to log the first 100 days of the Obama administration. The “subject_tags” column let the reporters enter a variety of categories, which were then normalized when it came time to use them.\n\n\n\n100 days\n\n\nThose tags resulted in it being relatively easy to create graphics like this by filtering for related tags and ordering it by date:\n\n\n\nreversals"
  },
  {
    "objectID": "start-build-own.html#an-example",
    "href": "start-build-own.html#an-example",
    "title": "7  Build your own database",
    "section": "An example",
    "text": "An example\nIn 2013, the New York Times and Frontline collaborated on a story on police-involved domestic violence. Most of the story was a narrative of a single case. But it was important to show that this was not the first time the sheriff in the Florida county was slow to investigate his deputies. Another case several years earlier had the same telltale problems.\nThe Times obtained several key documents in the other case.* You can read a copy of the internal affairs report yourself, but you quickly come away realizing that it’s hard to follow, repetitive and you’re never quite sure what’s happened. Here is the record layout of the table that we built, and a small snippet of what it looks like.\n\n\n\ndata dict\n\n\nAnd here is what a few rows look like. Notice that they are not organized chronologically, but are organized in the order that they were listed in the underlying document. The “sort” button turns it into a chronology.\n\n\n\nsjso-example\n\n\nAnd finally, here is what was written about the case in the final story:\n\nA year before that, Sheriff Shoar’s disciplinary posture had been called into question in a domestic violence case involving a deputy named Halford (Bubba) Harris II.\nTwo supervisors learned of accusations that Mr. Harris had abused his wife. But no investigation was immediately opened, records show.\nOne sergeant did prepare an affidavit documenting the accusations. But he was told by his supervisor to hold it back, so he stuck it under the visor in his squad car, where it remained, even after another officer became aware of further incidents, according to Mr. Harris’s internal affairs file.\nThe case came to a head on Christmas Eve, when his wife fled their house and called the police. Internal affairs officers uncovered other possible acts of domestic violence before his hiring, records show. His wife said that before they married, he had held a knife to her throat and hit her. His ex-wife said he had threatened her with a gun. No charges were filed.\nCol. Todd R. Thompson, the sheriff’s director of law enforcement, recommended that Mr. Harris be fired, saying his actions were “particularly egregious and trouble me deeply.”\n\nWas it necessary to create a spreadsheet logging almost 100 events in this case? No. But we had to go through every document in detail anyway, and this meant we didn’t have to do it over and over again."
  },
  {
    "objectID": "xl.html",
    "href": "xl.html",
    "title": "Spreadsheets",
    "section": "",
    "text": "Introduction\nSome people consider using spreasheets the table stakes for getting into data journalism. It’s relatively easy to see what you’re doing and you can easily share your work with your colleagues. In fact, pieces of the Pulitzer-Prize winning COVID-19 coverage from The New York Times was compiled using an elaborate and highly tuned set of Google spreadsheets with dozens of contributors.\nThis guide uses Excel for the Mac from Office 365, which most newsrooms still have. The reason is that they’re a little easier to get around and in particular have more options for pivot tables – a crucial part of the table stakes. But Google sheets shine elsewhere in this book, particularly when it comes time to scrape websites or import non-tabular file formats like JSON.\nExcel in Windows is very different – it has much more capability for working with large and more complex data, and provides better tuning for import and other operations.\nMost of the screen shots and instructions are created with a MacOS Monterey. Some come from earlier Mac versions, but are largely the same now. Windows users should replace any instructions for using the CMD- key with the CTL- key. There is a table that compares keystrokes for Apple desktops, laptops and Windows machines for Excel at the bottom of An Excel Refresher"
  },
  {
    "objectID": "xl-refresher.html#re-learning-excel-from-the-ground-up",
    "href": "xl-refresher.html#re-learning-excel-from-the-ground-up",
    "title": "8  An Excel Refresher",
    "section": "Re-learning Excel from the ground up",
    "text": "Re-learning Excel from the ground up\n\nThe spreadsheet grid\n\n\n\nWhen you start up a spreadsheet, you’ll see letters across the top and numbers down the side. If you ever played Battleship, you’ll recognize the idea – every little square, or cell, is referenced by the intersection of its column letter and row number:\nB2 is the cell that is currently active. You can tell because it’s outlined in the sheet and it’s shown on the upper left corner.\n\n\nMouse shapes\n\n\n\n\n\n\n\nBFWPS: The Big Fat White Plus Sign. This is the default shape, and you can never get into trouble when you see it\n\n\n\nThe Copy Tool, or the thin black cross. When you see this, you’ll copy anything that’s selected. This can be good or bad.\n\n\n\nThe Evil Hand. (In Windows, this is the Evil Arrow). If you use this symbol, you will MOVE the selection to a new location. This is very rarely a good idea or something you intend.\n\n\n\n\n\n\nSelecting cells and ranges\nSpreadsheets act only on the cells or regions you have selected. If you begin typing, you’ll start entering information into the currently selected cell.\nTo select: Hold the BFWPS over the cell and clice ONCE – not twice. Check the formula bar to make sure you’ve selected what you think you’ve got. You can also look at the bottom right of your spreadsheet for more information.\nYou’ll often work with ranges of cells in formulas. These are defined by the corners of the area you want to work on – often a column of information. In the example below, the range is A1:B6, with the “:” referring to the word “through”.\nTo select a group of cells and act on them all at once: Hover the BFWPS over one corner, click ONCE and drag to the diagonal corner. Make sure the Evil Hand is nowhere to be seen. The entire area will be shaded in except for the currently selected cell. Look at the upper right corner to see how many rows and columns you selected.\n\n\n\n\n\n\nTo select a column or row : Hover the BFWPS over the letter at the top of the column. For a row, hover it over the row number in the margin\n\n\nReading the screen\n\nThe areas of the spreadsheet have different visual clues, and learning to read them will make your life much easier.\nThis image shows some key areas on the screen when you’re just viewing the sheet:\n\n\n\nready\n\n\nThis is how it changes when you’re editing\n\n\n\nediting\n\n\n\nEntering data\nSelect the cell and start typing. The information you type won’t be locked into the cell until you hit the Return / Enter key, or move your selection to another cell. Hit “Escape” to cancel the entry.\nYou can’t do a lot of things while you’re editing, so if you have a lot of greyed out menu items, look at your formula bar to see if you are still editing a cell.\nIf you’re having trouble getting to a menu item or seeing the result of your work, try hitting “Escape” and try again. You may not have actually entered the information into the sheet.\n\n\nLocking in headings\nAs your spreadsheet grows vertically with more rows, you’ll want to be able to see the top all the time. When it grows horizontally with more columns, you’ll probably want to see columns in the left, such as names. This is called “Freezing Panes” – you freeze part of the page so it stays in place when you move around.\nSelect the corner that you want frozen. For example, if you want the first three columns frozen (A:C) and the first row frozen (1), then select the cell in D2. This is the first cell that will move, and everything to the left of it and above it will stay on the screen.\n\n\n\nfreeze panes\n\n\n\n\nFormatting tricks\n\nUse the buttons or the format dialog box to make numbers easier to read.\nIf a column is filled with a lot of text, select the column and look on the Home ribbon next to the formatting area for “Wrap Text”. This means that when you double-click to widen a column, it will get taller, not wider. This is good when you need to save valuable real estate on the screen."
  },
  {
    "objectID": "xl-refresher.html#getting-started-with-a-dataset",
    "href": "xl-refresher.html#getting-started-with-a-dataset",
    "title": "8  An Excel Refresher",
    "section": "Getting started with a dataset",
    "text": "Getting started with a dataset\nSLOW DOWN! Don’t do anything until you understand what you have in front of you and can predict what your next mouse click will do to it.\nMost data we encounter was created by someone else for some purpose other than ours. This means that you can’t assume anything. It may not be complete. It may be inaccurate. It may mean something completely different than it appears at first blush.\n\nFirst steps\n\nDocument where you got the spreadsheet and how you can get back to the original.\nRead anything you can about what it contains. Look for documentation that comes with the data.\nSave the original into a safe place with its original name and metadata. Work on a copy.\nIf the spreadsheet shows #### instead of words or numbers, widen your columns. If it shows 7E-14 or something like that, format them as numbers, not “General”.\nCheck your corners – look at the top left and bottom right. Is the data all in one area? Are there footnotes or other non-data sections mixed in? We’re going to want to fix that later.\n\n\n\nInterview your data\n\nHeadings\nThe most fraught part of data reporting is understanding what each column actually means. These often have cryptic, bureaucratic names. You may need to go back to the source of the data to be sure you actually understand them.\nIf your data doesn’t have any headings, that’s going to be your first priority. In effect, you’ll need to build what we call a data dictionary or record layout if one hasn’t been provided. Many reporters create these as a page in a dataset.\n\n\nUnit of analysis\nA unit of analysis refers to the items that are listed in the rows of your dataset. Ideally, every row should be at the same unit of analysis – a person, an inspection, or a city, for example. Summaries should be separated by a blank row, or moved to a different sheet. Think of this as the noun you’d use to describe every row.\n\n\nRow numbers\nThe data was probably given to you in some sort of natural sort order. Different computer systems sort differently – some are case-sensitive, others are not. It may depend on when and where the data as created! The order of the data may even depend on a column you don’t have. If you don’t do something now, you’ll never be able to get back to the original order, which could have meaning for both the agency and for fact-checking."
  },
  {
    "objectID": "xl-refresher.html#video-walkthrough",
    "href": "xl-refresher.html#video-walkthrough",
    "title": "8  An Excel Refresher",
    "section": "Video walkthrough",
    "text": "Video walkthrough\nThese first steps, along with adding an ID row, are shown here. You can follow along with the same dataset."
  },
  {
    "objectID": "xl-refresher.html#keyboard-shortcuts",
    "href": "xl-refresher.html#keyboard-shortcuts",
    "title": "8  An Excel Refresher",
    "section": "Keyboard shortcuts",
    "text": "Keyboard shortcuts\nFor Mac users, it’s much easier to use Excel if you override the action of function keys while you’re in the program. In your Mac’s System Preferences, choose Keyboard, and select the box that says, “Use F1, F2, etc. as standard function keys.” (NOTE: If you have a MacBook Pro with a touch bar (circa 2017-2020 or so), this option may not be there. Instead, go into the Shortcuts section of the keyboard options and turn off all of the options for Mission Control. Those are the ones that interfere with Excel.)\n\nOnce you’ve done that, these keyboard shortcuts will work:\n\n\n\n\n\n\n\n\nTo do this\nWindows or IMac\nMacbook\n\n\n\n\nEdit a cell\nF2\nCtl-U or F2\n\n\nToggle between absolute and relative references\nF4\nCtl-T or F4\n\n\nInsert cut cells\nCtl+\nCtl+\n\n\nDelete a cell\nCtl-\nCtl-\n\n\nSelect the top left of a spreadsheet\nCtl-Home\nCtl-Fn-Left arrow\n\n\nMove to the bottom right of a spreadsheet\nCtl-End\nCtl-Fn-Right arrow\n\n\nSelect a region (a contiguous rectangle of cells that are filled out)\nCtl -*\nCtl-Shift_spacebar\n\n\n\nYou should practice getting around a spreadsheet efficiently, since scrolling with the mouse while selecting is a lesson in frustration."
  },
  {
    "objectID": "xl-filter-sort.html#a-sorting-miracle",
    "href": "xl-filter-sort.html#a-sorting-miracle",
    "title": "9  Sorting and filtering to find stories",
    "section": "A sorting miracle",
    "text": "A sorting miracle\nAfter Ferguson, Mo., police killed Michael Brown in 2014, advocates and journalists began examining the racial and ethnic gap between police departments and the communities they served. The New York Times found a 7-year-old survey conducted by the Justice Department that allowed it to compare the data for major cities in a standalone graphic that it published later that year.\nWhen newer data reflecting departments’ makeup in 2012 was released a year later, Matt Apuzzo and I hoped it would show some differences. It didn’t. So we were left trying to find news in the data that was clearly of public interest.\nAfter matching up the demographics of police departments with their cities, I started sorting, filtering and Googling. Could there be news in the outliers on the list? Which departments most closely represented their communities? Which ones had unusually large gaps?\n\n\n\nChief William T. Riley III. Credit: Laura McDermott for The New York Times\n\n\nI quickly stumbled on telling anecdote to frame the story: Inkster, Mich. had one of the least representative departments in the country, and had recently hired a new police chief to help mend the department’s fraught relationship with its largely African-American community. Where had he come from? Selma, Ala., one of the most representative police departments in the nation. Interviews with the chief, William T. Riley III, suggested one reason for some cities’ disparities: there was no state or federal money to pay for training new police officers.\nThe story, “Police Chiefs, Looking to Diversity Forces, Face Structural Hurdles” helped explain the persistent gap between the makeup of police in some areas and the communities they served."
  },
  {
    "objectID": "xl-filter-sort.html#sorting-and-filtering-as-a-reporting-tool",
    "href": "xl-filter-sort.html#sorting-and-filtering-as-a-reporting-tool",
    "title": "9  Sorting and filtering to find stories",
    "section": "Sorting and filtering as a reporting tool",
    "text": "Sorting and filtering as a reporting tool\nSorting and filtering can:\n\nNarrow your focus to specific items that you want to examine in your story.\nShow you rows containing the highest and lowest values of any column. That can be news or it can be errors or other problems with the data.\nLet you answer quick “how many?” questions, with a count of the rows that match your criteria. (In the next lesson, you’ll see that pivot tables, or group-by queries, are much more powerful for this in most cases.)"
  },
  {
    "objectID": "xl-filter-sort.html#example-data",
    "href": "xl-filter-sort.html#example-data",
    "title": "9  Sorting and filtering to find stories",
    "section": "Example data",
    "text": "Example data\n\n\nData from the Washington Post for use in this tutorial\nDocumentation from the Post’s github site\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis data was derived from a version of the Post’s database that has since been revised. If you want to look at the original, it’s under “V1” in their github repo.\n\n\nThe data for this and several other chapters is the Washington Post’s public data collection of police shootings in the U.S. It includes the nation’s best guess about each fatal police shooting since 2015. There are a couple of caveats:\n\nIt excludes deadly police interactions other than shooting a firarem at the suspect. Any strangulation, car crashes, Tasers without guns or other methods are excluded.\nIt is based primarily on news reports and the results public records requests so it often contains the story as told by police. We know that many of those reports are sugar-coated at best, and lies at worst.\nThe Post says this is a list of fatal shootings, but doesn’t say what happens if more than one person is killed. The 2019 shooting of D’Angelo Brown & Megan Rivera in West Memphis is shown as two rows1 in the data even though it was one event. So each row might be considered a shooting “victim”, a “suspect” or a shooting “fatality” rather than a “shooting”.\n\nThe original data download link is https://github.com/washingtonpost/data-police-shootings/releases/download/v0.1/fatal-police-shootings-data.csv. The screenshots in this tutorial may not match exactly to what you get on their data – It had included incomplete 2021 data, and I added a column for the year.\nIt’s a good example set for us because it’s been used as the basis of many stories, it has at least one of each data type that we plan to deal with in Excel, and it is well documented on the Post’s github site."
  },
  {
    "objectID": "xl-filter-sort.html#understanding-data-types",
    "href": "xl-filter-sort.html#understanding-data-types",
    "title": "9  Sorting and filtering to find stories",
    "section": "Understanding data types",
    "text": "Understanding data types\nWhen you open the spreadsheet, the first thing to notice is its granularity. Unlike Census or budget spreadsheets, this is a list capturing specific characteristics of each fatality Each column has the same type of data from top to bottom. Those types are:\n\nText. Text or “character” columns can come in long or short form. When they are standardized (the values can contain only one of a small list of values), they’re called “categorical”. If they’re more free-form, they’re might be called “free text”. The computer doesn’t know the difference, but you should. The Post data has examples of both. In spreadsheets, text is left-justified (they move toward the left of the cell and will line up vertically at the beginning)\nNumbers. These are pure numbers with no commas, dollar signs or other embellishments. In Excel, as we’ll see in the computing section, these can be formatted to look like numbers we care about , but underneath they’re just numbers. Adding up a column of numbers that has a word in it or has missing values will just be ignored in Excel. It will trip up most other languages. These are right-justified, so the last digit is always lined up vertically.\nLogical: This is a subset of text. It can take one of only two values – yes or no, true or false. There is no “maybe”.\nDate and times: These are actual dates on the calendar, which have magical properties. Underneath, they are a number. In Excel, that number is the number of days since Jan. 1, 1900.2 They can also have time attached to them, which in Excel is a fraction of a day. What this means is that the number 44,536.5 is really Dec. 6, 2021 at noon. In Excel, you use a format to tell the spreadsheet how you want to see the date or time, just the way you look at dollar values with commas and symbols. (If you get a spreadsheet with a lot of dates of 1/1/1900, it means there is a 0 in that column, which is sometimes a fill-in for “I don’t know.”)\nHere’s a picture of a date that is shown in a variety of formats.\n\n\n\ndate formats\n\n\nAll of these are the same, underlying value – the number at the left. Notice that all of these are right-justified.\nThis means that when you see “Friday, December 10”, the computer sees 44540.87431. When you put the dates in order, they won’t be alphabetized with all of the Fridays shown together. Instead, they’ll be arranged by the actual date and time.\nIt also means that you can compute 911 response times even when it crosses midnight, or or compute the someone’s age today given a date of birth. Keeping actual calendar dates in your data will give it much more power than just having the words. (Excel uses the 1st of the month as a stand-in for an actual date when all you know is the month and year.)"
  },
  {
    "objectID": "xl-filter-sort.html#working-with-excel-tables",
    "href": "xl-filter-sort.html#working-with-excel-tables",
    "title": "9  Sorting and filtering to find stories",
    "section": "Working with Excel “tables”",
    "text": "Working with Excel “tables”\nExcel lets you put any type of data anywhere on your spreadsheet. To bring a little order to the chaos, it allows you to turn your data into a “table”, which is set up for sorting and filtering. It enforces some data types on you, and deals with missing information more smoothly. It is designed for tabular data without empty rows or columns, and where there is nothing else on the sheet.\nPut your cursor somewhere in the table, then use the “Format as table” button on the home screen. Check to make sure the “My table has headers” is checked.\n\n\n\n\nsort\n\n\n\n\nSorting rows\nSorting means rearranging the rows of a data table into a different order. Some reporters take a conceptual shortcut and call this “sorting columns”. That thinking will only get you into trouble – it lets you forget that you want to keep the rows in tact while changing the order in which you see them. In fact, in other languages it’s called “order by” or “arrange” by one or more columns – a much clearer way to think of it.\nIn Excel, look for the sort options under the Data tab at the top of your screen. In this case, sorting from oldest to newest gives you a list of the fatalities in chronological order, including the time of day.\nTo sort your data, put your cursor in one of the cells within your data area, and choose Data…Sort. Please don’t use the A->Z or Z->A buttons!\n\n\nAdding fields to the sort\nAdding more columns to the sort box tells Excel what to do when the first one is the same or tied. For example, sorting first by state then by date gives you a list that shows all of the events by state in sequence:\n\n\n\n\nFiltering\nFiltering means picking out only some of the rows you want to see based on a criteria you select in a column. Think of it as casting a fishing net – the more filters you add, the fewer fish will be caught.\nWhen you created the table, it also created little drop-down arrows on the top row. If you can’t see them, use CTL-HOME or CTL-UP on the first column to get yourself back to the top. Each filter you select adds more conditions, narrowing your net.\nTo find fatalities that involved a firearm with a Taser, use the drop-down menu under manner_of_death select it. (This is an example of naming a column in an unexpected way. Usually, a “manner” of death relates to the circumstances such as accident, suicide or homicide. It’s why you can’t count on understanding the column names without a crib sheet from the data’s maker, called a data dictionary or record layout. The Post’s crib sheet is excellent!)\nWhen you do this, notice that the bottom left briefly shows you the number of rows that matched your filter, and the line numbers turn blue. Any rows that don’t match your filter hidden.\n::: {.content-visible when-format=“html”}\n\n\n\n\n\n\n\nWarning\n\n\n\nThis method works for small-ish and simple-ish columns. If your column has more than 10,000 different entries, such as names or addresses, only the first 10,000 will be considered. We only caught these for stories when someone did a fact-check using a different method of filtering. If your column has a lot of distinct entries, use option that says “Choose One”, and then use the “Contains” option. Better yet, don’t use filtering for counting things at all.\n\n\nAdd more filters to narrow down your list of cases even more. For example, the New York Times ran a series of stories in 2021 about unarmed people shot by police. One story was about those who were fleeing by car. Here’s one way to get a preliminary list of those cases:\n\nRemove any filter you already have on.\nTurn on the filters again if you turned them off.\nChoose “unarmed” under armed and “car” under flee.\n\n(Of course, the Times didn’t stop there in trying to find more cases and teasing out more of them from this and other data. But this is a start. )\n\n\n\n\nDifferent kinds of filters\nThere are several options under the filter box, depending on what data type in in the column. In numeric columns, you can get top and bottom lists. Dates will automatically collapse into years, then months, then days to let you choose more efficiently."
  },
  {
    "objectID": "xl-filter-sort.html#video-of-sorting-and-filtering-with-salaries",
    "href": "xl-filter-sort.html#video-of-sorting-and-filtering-with-salaries",
    "title": "9  Sorting and filtering to find stories",
    "section": "Video of sorting and filtering with salaries",
    "text": "Video of sorting and filtering with salaries\nThis video goes through many of the details of sorting and filtering. Follow along using this spreadsheet of Phoenix city salaries. It’s from a different year, but the idea is just the same.\nNote that in this case, the original order of the dataset was alphabetical, except lower-case names came at the very end. It would be very hard to get back to this order in a spreadsheet if you didn’t have that leftmost column of numbers that indicated the original order."
  },
  {
    "objectID": "xl-filter-sort.html#faq",
    "href": "xl-filter-sort.html#faq",
    "title": "9  Sorting and filtering to find stories",
    "section": "FAQ",
    "text": "FAQ\n\nHow do I turn off all of my sort and filters\nIn the data tab, chose “Clear” (the funnel with the red “X”) to remove all of the filters and sorts on your table.\n\n\nWhere is the button to filter columns?\nSometimes you don’t want to see all of your columns – there are too many and they’re getting confusing. There is no column filter in Excel. (You’ll see how to filter, or “Select”, columns from a dataset in standard programming languages later.)\nInstead, you can hide the columns you don’t want to see. When columns and rows are hidden, they generally won’t copy to a new sheet.\n\n\nI’m getting weird questions and alerts about sorting\nSlow down and read the alert. There are two common types of alerts in sorting, since it has the potential to wreck your spreadsheet.\nThe first comes if you selected an entire column, and then just hit the button that says “A-Z” with the arrow. Excel won’t let you do that if it’s formatted as a table, but it will if it’s just a normal spreadsheet. This alert asks you if you REALLY want to sort only the column you’ve selected, separating its meaning from the rest of the rows. The answer is NO. Always. Expand the selection as Excel wants you do to by default.\n\n\n\nfilter date\n\n\nThe other comes when you have numbers that are treated as text. This is a tricky question, and a properly tidied spreadsheet should avoid it most of the time. If you have the same type of data in each column, the answer to this question shouldn’t matter. If not, neither one will give you what you want.\n\n\nI want to get rid of my data table\nYou can revert to the a plain old spreadsheet by selecting any cell within your table, then looking for the “Table” tab at the top of your screen. Choose the option that says “Convert to Range”."
  },
  {
    "objectID": "xl-pivot.html#tutorial",
    "href": "xl-pivot.html#tutorial",
    "title": "10  Grouping with pivot tables",
    "section": "Tutorial",
    "text": "Tutorial\n\nThis continues with the Washington Post’s police shooting database, but I updated it to include the descriptions of ethnicities.\nDownload the new version\n\n\nTL;DR\nHere’s a video with the same material:\n\n\n\n\nSetting up the pivot table\nStart with your cursor somewhere in your data , and choose Insert, then Pivot table\n\n\n\ninsert menu\n\n\nIf all goes well, it will look like your data disappeared. It didn’t – you’re just on a new page. Here’s what it looks like:\n\n\n\npivot menu\n\n\n\n\nCounting , or “how many”?\nThe section on the right gives you an outline of what to do. The section on the left will get filled in as you make your pivot table. If you want to see the number of fatalities by ethnicity, drag that column into the “Rows” area, then drag something that’s always filled out into the Values area (state is a safe one in this data).\n\n\n\nPercents of total\nIt’s hard to compare raw numbers unless they’re really small. Instead, we’d like to know what percent of fatalities by ethnicity. Right-click on any number in the pivot table, and choose “Show data as…” , then choose “Percent of Column total”.\n\nTo remove it, right-click on it and choose “Remove”Count of state2”“.\n\n\nMore variables\nSuppose you’d like to see the number of fatalities by year, with the years across the top and the ethnicity down the sides. Drag the year variable into the column area . Sorting can get hinky on pivot tables, but in this case it will work to put the largest number on top. This won’t work with percentages – it still sorts by the underlying number.\n\n\n\nEven more variables\nSay you wanted to see each city’s total shootings by year. Which one had the most last year, and which one had the most overall?\nThis is actually really hard in a pivot table, because there are cities with the same names in different states. It means you’d need to have a pivot table with TWO columns down the side, and one across the top. Here’s my attempt at getting there:\n\n\n\nbadsort\n\n\nThis is after some fiddling with the formats, and I still can’t sort properly – the city “Phoenix”, including those in Maryland and Arizona, had the second-highest number of shootings. We can’t sort by the combination of city and state.\nYour choices in Excel are limited: Copy and paste the values of the pivot table into a new sheet and sort there, or create a new variable by concatenating the name of the city and state into one column."
  },
  {
    "objectID": "xl-pivot.html#faq",
    "href": "xl-pivot.html#faq",
    "title": "10  Grouping with pivot tables",
    "section": "FAQ",
    "text": "FAQ\n\nEverything disappeared!\nIf you select something outside of that pivot table on the left, the menu on the right disappears. Select something in the pivot table area and it will likely come back.\n\n\nI have too many columns\nIf you want two sets of statistics – say, number of fatalities and percent of fatalities – across the top, it can get very wide and confusing very quickly. One alternative is to change it into more of a vertical rectangle by dragging the “Values” element from the columns to the rows on the right. (This only shows up when you have two calculations being made.)\n\n\nI want to sort by percents, not numbers\nYou can’t.\n\n\nThings aren’t adding up\nYou have to be super careful about which column you use to Count things – it has to always be filled out (there can’t be any blanks). Go through the filters and find one that doesnt have (Blanks) at the bottom to be sure.\n\n\nIts a crazy number!\nYou might have dragged a numeric column into the “Values” area. Check to see if it says “Count” or “Sum”. Change it to “Count” if it has something else on it, unless you wanted to add up that column.\n\n\nThis is so frustrating - I can’t get what I want\nRight? It’s time to go to a programming language!"
  },
  {
    "objectID": "xl-formulas.html#formulas-in-spreadsheets",
    "href": "xl-formulas.html#formulas-in-spreadsheets",
    "title": "11  Formulas in Excel",
    "section": "Formulas in spreadsheets",
    "text": "Formulas in spreadsheets\nWhether you use Excel or Google sheets, remember that every formula begins with the equals sign (=). Rather than the values you want to work with in the formula, you’ll use references to other cells in the sheet.\nThe easiest formulas are simple arithmetic: adding, subtracting, multiplying and dividing two or more cells. You’ll just use simple operators to do this:\n\n\n\noperator\nsymbol\nexample\n\n\n\n\naddition\n+\n=A2+B2\n\n\nsubtraction\n-\n=A2-B2\n\n\nmultiplication\n*\n=A2*B2\n\n\ndivision\n/\n=A2/B2\n\n\n\nHere’s what a spreadsheet looks like while editing some simple arithmetic:\n\n\n\nformula\n\n\nThe other kind of formula is a function. A function is a command that has a name, and requires arguments – usually the cell addresses or the range of addresses that it will act on. Every programming language has functions built in and many have extensions, or packages or libraries, that add even more as users find things they want to do more efficiently. You begin using a function the same way you begin a formula – with an = sign. Here are three common functions that create summary statistics for the numbers contained in a range of addresses. A range is a set of cells defined by its corner cell address: the top left through the bottom right.\nYou’ll usually use them on a single column at a time.\n\n\n\nFormula\nWhat it does\n\n\n\n\n=SUM(start:finish)\nAdds up the numbers between start and finish\n\n\n=AVERAGE(start:finish)\nComputes the mean of the numbers\n\n\n=MEDIAN(start:finish)\nDerives the median of the numbers\n\n\n\n…where “start” means the first cell you want to include, and finish means the last cell. Use the cell address of the first number you want to include , a colon, then the cell address of the last number you want to include. You can also select them while you’re editing the formula.\nHere’s an example of adding up all of the rows in a list by county:\n\n\n\nformula"
  },
  {
    "objectID": "xl-formulas.html#common-spreadsheet-arithmetic",
    "href": "xl-formulas.html#common-spreadsheet-arithmetic",
    "title": "11  Formulas in Excel",
    "section": "Common spreadsheet arithmetic",
    "text": "Common spreadsheet arithmetic\nThe budget document shows three years’ of data: The actual spending in the fiscal year that ended in 2016; the spending that was estimated for the end of fiscal year 2017; and the proposed spending for fiscal year 2018. The first page of the document shows these amounts for broad spending categories.\nYou may want to widen the columns and format the numbers before you start:\n::: {.content-visible .when-format=“html”}\n\n:::\n\nCheck the government’s math with SUM\nOur first job is to make sure the government has provided us data that adds up. To do that, we’ll SUM all of the departments’ spending. To add up the numbers from 2016, enter the following formula in cell C11, just below the number provided by the government:\n  =SUM(C2:C8)\n  and hit the enter key\nCopy that formula to the right. Notice how the formula changes the addresses that it is using as you move to the right – it’s adjusted them to refer to the current column.\n\n\n\nWhat’s wrong? The numbers for the budget 2018 don’t add up. (Hint: look at the page called “notes” for an explanation.)\n\n\nChange in spending\nThe increase or decrease in projected spending from 2017 to 2018 is just the difference between the two values, beginning in cell F3\n  new-old, or  =E2-D2\nWhen you copy it down, note how the references to each row also adjusted. In line 3, it’s E3-D3, and so on. Excel and other spreadsheets assume that, most of the time, you want these kinds of adjustments to be made.\n\n\n\n\n\nPercent change\nWe can’t tell the rate of growth for each department until we calculate the percent change from one year to another. Now that we already have the change, the percent change is easy. The formula is:\n  ( new - old ) / old\n\n  .. or just scream \"NOO\"\nThe new-old is already in column F, so all that’s left is to divide again. In grade school, you also had to move the decimal place over two spots, since the concept of percent change is “out of 100”. Excel formats will do that for you.\nRemember, it’s always (new-old)/old , NOT the big one minus the little one. Doing it correctly, the answer could be negative, meaning the value fell.\n\n\n\n\n“% change”\n\n\n\nWhen you’re done, you can format the answer as a percentage to get it into whole numbers.\nUntil you get used to it, there’s no harm in doing these calculations step by step. Excel won’t complain if you have extra columns. You can always hide them.\nIt’s also worth comparing the picture you get by looking at raw numbers vs. percentages. In our case, the budget for public safety is expected to rise by a whopping $102 million, but it’s a smaller percentage increase than other, smaller departments.\n\n\nParts of a whole: percent of total\nWe’d also like to know what portion of the total spending is eaten up by each department. To do that, we need the percent of total.\nIn our case, let’s use the total that the government gave us. In practice, you’d have to decide what to do if your figures didn’t match those provided by officials. You can’t assume that the total is wrong – you could be missing a category, or there could be a mistake in one of the line items.\nThe formula for percent of total is:\n  category / total\nAgain, Excel will multiply by 100, or move the decimal place over for you once you format.\nBut you have a problem: You either have to type in each row, or you get something like this if you try to copy:\n\n\n\n\nWrong way\n\n\n\nExcel has done its magic, adjusting the location of both the numerator and the denominator when you copied. You don’t have to type in each formula one by one, though. Instead, you’ll use anchors, known in spreadsheets as “absolute references”. Think of a dollar sign as an anchor or stickpin, holding down the location of part of your formula. If you put the stickpin before the letter in the formula, it holds the column in place. If you put it before the number, it holds the row in place. If you put it in both places, it holds the cell in place.\nSo our new formula for the percent of total is:\n\n\n\n\nE2/E$10"
  },
  {
    "objectID": "xl-formulas.html#while-were-at-it-two-kinds-of-averages",
    "href": "xl-formulas.html#while-were-at-it-two-kinds-of-averages",
    "title": "11  Formulas in Excel",
    "section": "While we’re at it: two kinds of averages",
    "text": "While we’re at it: two kinds of averages\nAlthough it doesn’t make a lot of sense in this context, we’ll go ahead and calculate the average or mean size of each department, and then calculate the median size.\nSimple average, or mean\nA simple average, also known as the mean, is skewed toward very high or very low values. Its formula is\n    sum of pieces / # of pieces that were summed\nBut in Excel, all we need is the word AVERAGE:\n    =AVERAGE(C2:C9)\nMedian\nIn Excel, you can get the median of a list of numbers by just using the formula, MEDIAN()\n  = MEDIAN(C2:C9)"
  },
  {
    "objectID": "xl-formulas.html#the-final-spreadsheet",
    "href": "xl-formulas.html#the-final-spreadsheet",
    "title": "11  Formulas in Excel",
    "section": "The final spreadsheet",
    "text": "The final spreadsheet\n\n\n\n\nfinal worksheet\n\n\n\nDoing simple calclutions like this on data that is provided to you by the government lets you ask better questions when you get an interview, and may even convince officials to talk with you. There’s a big difference between asking them to tell you what the budget numbers are, and asking them to explain specific results!"
  },
  {
    "objectID": "xl-formulas.html#faqs",
    "href": "xl-formulas.html#faqs",
    "title": "11  Formulas in Excel",
    "section": "FAQs",
    "text": "FAQs\n\nExcel won’t let me copy my formula\nMake sure your formula is locked in by either hitting “Enter” or “Escape”. This is a common problem if you’re in the habit of double-clicking instead of selecting a cell. There are a lot things you can’t do while Excel thinks you’re still entering information.\n\n\nShould I use average or median?\nIt depends. Averages are easier to explain but can be misleading. Usually, if they’re very different, median will be a better representation of the typical person, city or department. Averages in these cases are more like totals.\n\n\nMy percents are small numbers with decimal points\nUse the format as a % button to move the decimal point over two places and insert the percentage symbol.\n\n\nMac Users: There’s some kind of weird image on top of my spreadsheet. Or some other very weird hiccup.\nI have no idea what this is, but it happens. Save your spreadsheet, close it and then re-open. It should go away."
  },
  {
    "objectID": "xl-practice-noc.html#data-source",
    "href": "xl-practice-noc.html#data-source",
    "title": "12  Practice exercise",
    "section": "Data source",
    "text": "Data source\nData download\nCity link to Notice of claims form and instructions to claimants\nBackgrounder on the data from Helen Wieffering\nThis dataset includes all “Notice of Claims” against the city of Phoenix between 2010 and 2020. These claims refer to damages that people say they suffered because of a problem in the government ranging from slip-and-fall in a city building to use of force by police. It was obtained by Helen Wieffering just after the end of the 2020 fiscal year, so many of the claims from that year will be unresolved. Although the names of the claimants are public record, they were not included in the data compiled here. Also missing is the court case number of any cases that went to court.\nMake sure to look at the “data_dictionary” sheet for the definitions of each column before you start.\nIn this tutorial, I’m providing the equivalent of a data diary for you – if you follow these instructions, you should come up with the same answers I did. You should keep your own diary alongside your work."
  },
  {
    "objectID": "xl-practice-noc.html#sort-filter",
    "href": "xl-practice-noc.html#sort-filter",
    "title": "12  Practice exercise",
    "section": "Sort / filter",
    "text": "Sort / filter\nI almost always go into the Excel preferences, and under “Tables & Filters” turn off the check that says “Use table names in formulas”. Sometimes it sticks, sometimes it doesn’t. Have no idea why.\nArrange (sort) the claims using the ID column which is called “orig_order”.\n\nWhat is the orig_order (id) value of the largest PAID claim in the database (combined personal injury and property) ?\nWhat department and cause were associated with that payment?\nHow long did it take to resolve it?\nDescribe the most recent claim made against the police related to law enforcement activities, regardless of whether it’s been resolved.\nFilter for pd_total of greater than zero, and the type called “Shootings”. Look at the lower left corner and record how many claims against the city for shootings were paid any money?\nFind one other thing that you might want to research further that could make an interesting one-off story. These are distinct events that you’d like to know more about, not trends or patterns. This requires no calculation, just your news judgment."
  },
  {
    "objectID": "xl-practice-noc.html#pivot-table-motivation",
    "href": "xl-practice-noc.html#pivot-table-motivation",
    "title": "12  Practice exercise",
    "section": "Pivot table motivation",
    "text": "Pivot table motivation\nHere are some questions you have about each department in the city:\n\nWhat was the highest and lowest payout they made?\nHow many claims were made, and how many were paid out?\nWhat was the total amount paid and the average per claim?\n\n\nUsing filters to answer big questions\nHere’s one way to do it, using the filters:\n\nRemove all of your filter.\nFilter by department. We’ll start with Aviation, the first one on the list.\nSelect the entire table, including the headings. Copy it to a new sheet. Don’t be surprised if you miss the headings or some of the columns the first couple of times through and have to do it again.\n\nRename the new sheet “Aviation” by double-clicking on its tab.\nMake sure you’re in the top left corner of the screen (use CTL-HOME key if you’re on a real keyboard, CTL-UP and CTL-Left if you’re not.) Freeze the column headings so you can scroll to the bottom and still see what you’re looking at (under View, Freeze top Row)\nNote the number of rows that were copied and subtract one. Record that as the number of claims made.\nMake sure you start from the top of the sheet, and filter out “Unresolved” claims by un-selecting it. Don’t touch anything before you note the number of records found at the bottom left (it should be 11852 in this case). That’s the number of resolved claims. Now filter on the same column, and uncheck “No payment” and note the number of claims. It should be 5718.\nGo to the bottom of the worksheet. Skip a row, and sum the column. Repeat that, replacing =sum() with =max(), =min() , =average().\nWrite down all of your answers on a piece of paper.\n\nDon’t be surprised if you do this wrong a few times, and you have to do it over. But now you have the answer for the Aviation department.\nTry to imagine what you’d do if you wanted to know the average and minimum payout of just those that were settled ."
  },
  {
    "objectID": "xl-practice-noc.html#rinse-repeat",
    "href": "xl-practice-noc.html#rinse-repeat",
    "title": "12  Practice exercise",
    "section": "Rinse, repeat",
    "text": "Rinse, repeat\nNow repeat that entire process with at least two other departments that interest you."
  },
  {
    "objectID": "xl-practice-noc.html#pivot-table",
    "href": "xl-practice-noc.html#pivot-table",
    "title": "12  Practice exercise",
    "section": "Pivot table",
    "text": "Pivot table\nAt this point, you should be thoroughly sick of having to do things over and over. The purpose of the pivot table is to let you compute these aggregate, or summary, statistics all at once for each category or set of categories. It can compute average, minimum , maximum and sum of values, and it can count the number of rows for any column. (In Excel they’re always the same. That’s not always true of all programs depending on how they handle missing information.)\n\nCreate the pivot table\n1, Create an empty pivot table from the data table.\n\nLook for the “Options” tab toward the top left, and turn off “Generate GetPivotData”. In the same tab, under “Options”, set error values to “N/A”, and set Empty cells to zero (meaning there was nothing in that category.)\nDrag “Department” to the row area\nDrag the type_case to the filter area\nDrag the “department” to the Values area and make sure it says “Count of Department”.\nDrag the pd_total to the Values area, and make sure it says “Sum of pd_total”. If it doesn’t, change the pivot table calculation to “Sum”. Repeat that three times, with “average”, “min” and “max”.\n\nTry playing with the placement of items in the pivot table to get an intuition for what they do. You can drag a column into the “Filter” area so that you can pick out just some of the cases for analysis. It works the same way as the filter in the original sheet.\n\n\nPractice questions\nNow answer the following questions:\n\nWhat department had the most claims made against them from FY 2015-16 to through 2019-20?\nHow much did the city pay in that time because of complaints against Streets. Did any department pay more?\nOn average, how much did the city pay vs. the amount that was requested? Include only those complaints that have been resolved – not those that are still underway or have been reopened."
  },
  {
    "objectID": "r.html#introduction",
    "href": "r.html#introduction",
    "title": "R Study Guide",
    "section": "Introduction",
    "text": "Introduction\nThis is probably your first introduction to coding. Don’t be worried. With effort, much of what reporters do in coding can be learned in a few weeks.\nLike most reporters, I learned the coding that I know (which isn’t a lot) because I wanted to get a story done. In our class, we are not trying to become programmers or social scientists. We’re working on stories.\nYou saw during the pivot table lesson that spreadsheets have limits. We couldn’t easily get the city with the most police shootings because we would have had to put both city and state into the pivot table. A median is missing from pivot tables entirely. It’s easy to lose track of where you are and what you did. That’s the reason to learn some coding – there is something we want to know that isn’t very easy to get in other ways.\nAll programming languages have one thing in common: You write instructions, called algorithms, and the program executes your statements in order. It means you can do more complicated work in computer programming than in point-and-click parts of Excel. It can also scale – you can repeat your instructions millions of times, tweak it a little, and re-run the program without messing anything else up. The computer won’t mind. Really.\nWriting code can also be self-documenting. You can largely eliminate those painstaking Excel data diaries and replace them with documents that explain your work as you go. You’ll still need to record information about your interviews and decisions, but you’ll no longer have to write down every mouse click.\nIf you’re nervous about getting started with programming, take look at the Appendix: A gentle introduction to programming and Jesse Lecy’s “Learning how to Learn”, where he says:\n\nIf this is your first programming language, you will get frustrated at times. Take a step back and remember that after a semester of Spanish you can only operate at the level of a three-year old. You only know one verb tense, a few dozen verbs, and several hundred words. You have so many emotions that you can’t express in your new language!\n\nThe good news for journalists is that you can accomplish most of what we need with the vocabulary of a three-year-old.\nAll I ask is that if you get very frustrated, walk away from the computer for a little while. Get help if, after a break, you don’t know what you might do next to make some progress. #dj-sos on Slack is one option. Use it. If you’re stuck, it’s quite likely others are as well. But don’t let it get to you. As Lecy says, your morale is a limited commodity.\n\nR or Python?\nIf you ask a data scientist or technologist which language you should learn first, you’ll start a heated debate between advocates of R, Python, Javascript , SQL, Julia and others. Ask the same question of a data journalist and the answer will be: “Choose one that is free and that your colleagues use so you can get help.” For our purposes, it really doesn’t matter – any of the standard languages will do.\nMy only rule is that you stick to your first language for a little while before trying a new one. It would be like trying to learn Portuguese and Spanish at the same time, when you know neither one to begin with. They’re related, but very different.\nEmployers who hire data reporters usually don’t care which programming language you know because it’s relatively easy to learn another once you’re comfortable with the concepts and good data journalism habits. In a few cases, such as the Associated Press, R is preferred. In others, like the Los Angeles Times, it’s a little easier to work with the team if you work in Python. Visualization teams generally work in Javascript. But most employers will just be happy that you are reasonably self-sufficient in any language.\nI chose R because I find it a little easier to use when trying to puzzle something out step by step, and it is particularly good at working with the weird and varied forms of data thrown at us, but it’s really just a matter of taste and comfort.\nThe following chapters lay out the fundamentals of data journalism with R. I’ll be adding chapters as we want them during class. The format of these chapters varies a little from the rest of the book. Each section will begin with the key concepts and skills that are included, which I hope will make them easier to find when you need them."
  },
  {
    "objectID": "r.html#structure-of-the-chapters",
    "href": "r.html#structure-of-the-chapters",
    "title": "R Study Guide",
    "section": "Structure of the chapters",
    "text": "Structure of the chapters\nIn this set of chapters for R, the following colors mean this:\n\nBlue background means that there’s some extra information that may be helpful.\n\n\nYellow background means “Warning!” Something bad could happen.\n\n\nThis dark background is specific instructions you should follow for class."
  },
  {
    "objectID": "r.html#credits",
    "href": "r.html#credits",
    "title": "R Study Guide",
    "section": "Credits",
    "text": "Credits\nThe first few chapters in this section rely on work done by Andrew Heiss and Christian McDonald."
  },
  {
    "objectID": "r-install.html#install-r-and-rstudio",
    "href": "r-install.html#install-r-and-rstudio",
    "title": "13  Installing R and RStudio",
    "section": "Install R and RStudio",
    "text": "Install R and RStudio\n\nR is the programming language itself, and has to be installed first. Andrew Heiss has called it the “engine” behind your work.\nRStudio, made by the company posit.co, is the way we’ll interact with the programming language. Install it second. Heiss calls it the “fancy car” that you drive.\nPackages are extra sets of programs that perform specialized jobs more easily than working with the “base” R language. A package must be installed once on your computer, then invoked to use them in a program. R is almost useless without them.\n\n\nFollow this interactive tutorial on installing R, RStudio and the tidyverse on your computer:\nhttps://learnr-examples.shinyapps.io/ex-setup-r/#section-welcome .\n\nThere are several differences between the video and today:\n\nThe name of the company has changed from RStudio to Posit, so some of the links may now take you to the Posit site. The name of the software – RStudio – has not changed.\nThe tidyverse will take much longer to finish installation. It has a lot to do and often looks like it’s stalled.\n\n\nInstall R\nThere are two versions of R for Mac users: The traditional one and the one for the new M1 chip on the latest machines. Choose the one that matches your machine by checking the apple in the upper left and looking at “About this Mac”. It will say “Apple M1” as the processor if you have it.\nLink to find your version: https://cloud.r-project.org/\nMac OS:\n\n\n\nThe version you see may be higher than “4.1”. As of December 2022, it’s 4.2.2\n\n\nWindows 10/11:\nYou only need the “base” version for our class.\n\n\nInstall RStudio\nThere is no special RStudio version for Mac M1’s. As of December, 2022, these are the versions:\n\nRStudio for Windows 10/11\nRStudio for Mac OS\n\nCheck for later versions of the Desktop product on the Posit website.\n\n\n\n\n\n\nMac users: Command line tools\n\n\n\nIf you get an error during or after installation about “command line tools”, ask me to help you. It’s a simple fix. RStudio will actually work without it, but you’ll get a lot of annoying warnings.\nIf later during package installation you get errors that mention “git” or “xcode-select” just say yes!\nIf R asks you if you want to install packages from “source”, say “No”.\n\n\n\n\nEmergency backup plan\nPosit Cloud allows you to use R and RStudio without installing it on your computer.\nIt has its problems, but it works for some of what we do. Before long, it may require you spend $5/month on a paid account, since it has extremely limited capacity in the free version, but it’s enough to get you started. You can probably do everything you need to do for this course in a single project.\n\n\n\n\n\n\nCronkite students\n\n\n\nWe can work together if you’re having trouble installing the software. You can also use the lab in Cronkite 320 and in our classroom, where all of the software is already installed.\nSee me if you want to use the cloud version instead of your own computer or those in Cronkite labs. You’ll need to adapt some of the instructions in this and the next couple of chapters, and will have to turn in your assignments differently.\n\n\nYou will have to upload any data or images or other material you want to use, and you will have to download your documents, programs and data in order to turn them in – you can’t use the link to the Posit Cloud, or you’ll run out of free time very quickly.\nSome limitations:\n\nIt just doesn’t work very well on the Quarto documents that we’ll be using. You probably won’t be able to see your finished document.\nYou can only use 1GB RAM - this won’t be enough for some of our projects.\nYou only get 25 hours per month to use it. During the key part of our course, this SHOULD not be enough.\nIt sometimes chokes! We’ve had it lose student’s work.\n\n\n\nUnlocking packages and the tidyverse\nThe real power of R comes with packages. Packages are bundles of programs that others have found useful to extend the base R language. R is almost useless without them. There are more than 10,000 packages available for R, each doing a special job.\nIf you followed along with the tutorial, the last thing you did was install a “package” called the tidyverse. Almost everything we do from now on depends on that step.\nMost of the materials you see related to programming in R have some reference to the tidyverse. One problem with having a lot of packages, often written by hobbyists, is that they’re not very consistent. One might use a comma where another uses some dots, for example. One might expect your data to come in the “spreadsheet” form that we studied earlier in this book, and others might expect it to come in the “database” form.\nThe tidyverse packages up a whole set of other packages that are designed to work together smoothly with similar grammar and syntax. It’s particularly useful for the kind of work reporters do – importing, cleaning and analyzing data that we get from others and can’t control how it’s structured. It works best on granular data that arrives in database form rather than tabular statistics that come in aggregated spreadsheets, but it has methods to convert across these forms.\nFor many reporters (myself included), R was too difficult to learn before the tidyverse came around. We’ll be working almost exclusively within the tidyverse in this course.\n\n\n\n\n\n\nTip\n\n\n\nWhen you Google for help, put the word “tidyverse” somewhere in your query. Otherwise, you may get answers that look inscrutable and unfamiliar.\n\n\nThe tidyverse is the brainchild of Hadley Wickham, a statistician from New Zealand, who famously identified tidy data principles we’ve implicitly followed all semester. He’s currently the chief data scientist for RStudio in Houston."
  },
  {
    "objectID": "r-install.html#set-up-rstudio-for-data-reporting",
    "href": "r-install.html#set-up-rstudio-for-data-reporting",
    "title": "13  Installing R and RStudio",
    "section": "Set up RStudio for data reporting",
    "text": "Set up RStudio for data reporting\nStaying organized is one of the challenges of data reporting – you’re constantly re-downloading and re-jiggering your analysis and it’s easy to get your material separated. This setup helps ensure that you always know where to find your work and can move it to another comptuer seamlessly.\nBefore you start, decide on a folder you’ll use to store all of your R work.\n\n\nCreate a folder called maij-working within your Documents folder (or on the root folder of your portable hard drive)\nStart up RStudio (NOT R) , and choose Tools -> Global options (in a Mac)\nMake sure that all of the options to save .Rdata and load files on startup are UN-checked\n\n\nHere’s a video of what you should do :"
  },
  {
    "objectID": "r-start.html#getting-to-know-the-rstudio-screen",
    "href": "r-start.html#getting-to-know-the-rstudio-screen",
    "title": "14  Getting started with R",
    "section": "Getting to know the RStudio screen",
    "text": "Getting to know the RStudio screen\nThis is what your screen probably looks like:\n\n\n\nconsole\n\n\n\nThe Console\nThe Console is where you can type commands and interact directly with the programming language. Think of it as a very powerful calculator at first. One reason to use it is to install packages.\nIf you followed the installation demo, you’ve already used the console to install one package using the command install.packages(\"tidyverse\"). Go back and do that part now if you skipped it.\n\n\nFiles tab\nWe won’t be using many of the tabs in the lower right, but the Files tab can help you if you’re having trouble navigating your work. Under the More button, you can choose “Go to working directory”, since that’s where R thinks you’ve parked all of your work. This can be confusing in R, which is why we’ll be working in “projects” that bundle up all of your work in one place.\n\n\nEnvironment\nThe upper right screen is the Environment, which is where your active variables live. A variable is a named thing. It might be a word, a list of words or numbers, or a data frame (spreadsheet). You will understand this better after you take the Posit “Programming basics” tutorial referenced below.\nAnything that you want to use has to be listed in that environment before you can reference it. This will make more sense later.\n\n\nTyping into the console\nWhen you type this: 5+5 after the > prompt, you’ll get this back after you press Return/Enter: [1] 10\nWhen you type this: \"Sarah\" (with quotes) after the > prompt, you’ll get this back: [1] \"Sarah\"\nTo create a new variable, you’ll use the assignment operator <- (two characters : A less than sign and a hyphen). Here is how I would create the variable called my_name (lower case, no spaces). Notice how it appears in the Environment after being created. Then I can print it by typing the name of the variable instead of the letters of my name in quotes:\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nUse the keyboard shortcut CMD/CTL - SHift - M to create an assignment operator <-\n\n\nThe console remembers your commands, but you have to type them one at a time and it will forget them when you leave for the day. That’s why we’re going to work in programs called Quarto documents most of the time.1"
  },
  {
    "objectID": "r-start.html#tutorials",
    "href": "r-start.html#tutorials",
    "title": "14  Getting started with R",
    "section": "Take a tutorial",
    "text": "Take a tutorial\n\nTake the “Programming basics” tutorial from Posit.\n\nIt will walk you through some of the basic language elements in R, and how you will use them. Don’t worry that they are very number-centric. Instead, focus on the concepts of functions, arguments and objects.\nFor a higher level view, consider reviewing the Gentle Introduction to Programming in the Appendix of this textbook.\n\nOptional hands-on tutorial:\nOne of the packages you installed earler was called swirl. It contains some interactive tutorials that get you used to typing commands into the Console.\nTo take it, make sure your cursor is in the Console, and start it by typing swirl::swirl(). (Don’t worry too much what that means right now.) Just do the first chapter called R Programming: The basics of programming in R, and just the first section, called Basic Building Blocks."
  },
  {
    "objectID": "r-start.html#take-a-tour",
    "href": "r-start.html#take-a-tour",
    "title": "14  Getting started with R",
    "section": "Take a tour",
    "text": "Take a tour\n\nWatch Andrew Heiss’s tour of RStudio.\n\n\n\n\nWe will not be using the R scripts as he shows in the end of the video, but many other examples and resources do. Also, as we get into working with Quarto, the “code chunks” work the same way as a script."
  },
  {
    "objectID": "r-start.html#packages",
    "href": "r-start.html#packages",
    "title": "14  Getting started with R",
    "section": "Install a few more packages",
    "text": "Install a few more packages\nWe need to update your packages and install a few more for our work, even if you’ve already installed the tidyverse.\nYou may use the commands below, or use the “Packages” tab in RStudio to install them.\n\nOption 1: Use the console\n\nCopy these commands into your Console. They ensure that your packages are up to date, and install a few extras that aren’t included in the Tidyverse. You only have to do this once.\n\nupdate.packages(ask=FALSE)\ninstall.packages(c(\"janitor\" , \"quarto\", rmarkdown\", \"swirl\", \"pacman\"))\n \n\n\n\n\nOption 2: Use RStudio “Packages” tab\n\n\n\n\npackages"
  },
  {
    "objectID": "r-start.html#use-rstudio-projects",
    "href": "r-start.html#use-rstudio-projects",
    "title": "14  Getting started with R",
    "section": "Use RStudio Projects",
    "text": "Use RStudio Projects\nOne of the things that trips up new users of R is that it’s hard to tell the program where to find things on your computer. The “working directory” can be confusing.\nWe’ll be working entirely in projects in this course. Projects keep everything needed together so that they can run on almost any machine.\nCreate a new project by hitting the second green + sign at the top of your screen, create a new directory within the one that we’re working (you can also find it under the File menu item):"
  },
  {
    "objectID": "r-start.html#relax",
    "href": "r-start.html#relax",
    "title": "14  Getting started with R",
    "section": "Relax!",
    "text": "Relax!\n\n\n\nFigure 14.1: Relax by Silwia Bartyzel via Unsplash\n\n\nYou’re all set up and we’re ready to start programming. Congratulate yourself - everything is new, nothing is intuitive and the screen is intimidating. You’ve come a long way."
  },
  {
    "objectID": "r-quarto.html#r-projects",
    "href": "r-quarto.html#r-projects",
    "title": "15  Using Quarto",
    "section": "R projects",
    "text": "R projects\nOne of the things that trips up new users of R is that it’s hard to tell the program where to find things on your computer. The “working directory” can be confusing.\nWe’ll be working entirely in projects in this course. Projects keep everything needed together so that they can run on almost any machine.\n\nCreate a new project by hitting the second green + sign at the top left of your screen, or choose File -> New Project.\nWhen prompted, create a new directory within the one that we’re working (you can also find it under the File menu item) called first-quarto1\n\n\n\n\n\nnew project\n\n\n\nThis creates a file with the extension .RProj in the folder you designate. From now on, you can open the project by double-clinking on that file, or by using the drop-down menu at the upper right of your RStudio screen."
  },
  {
    "objectID": "r-quarto.html#hello-quartor-quarto-2",
    "href": "r-quarto.html#hello-quartor-quarto-2",
    "title": "15  Using Quarto",
    "section": "Hello, Quarto2",
    "text": "Hello, Quarto2\n\n\n\n\n\n\nMake sure Quarto is installed!\n\n\n\nTo use Quarto, you must have it installed on your computer. One easy way to do that is to install the quarto and rmarkdown packages in R, which you did at the end of the last chapter. Do that now if you skipped that step.\n\n\nQuarto is a document format that lets you combine your writing, images, computer code and its results into complete documents. We’ll only be using Quarto for R using RStudio, but it also works in other languages such as Python and Javascript. Once you know how to use it in one context, it will work in other contexts.\nCreating documents with Quarto lets you ditch those tiresome data diaries.\nGenerally, you write your document around chunks of R code, which integrates your analysis with your writing. Some news organizations do much of their internal work using Quarto and its predecessor, RMarkdown.\n\n\n\n\n\n\n\nQuarto is modern RMarkdown\n\n\n\nMany help pages and tutorials in R use the format called “R Markdown” instead of Quarto. Quarto was introduced in mid-2022 as a replacement for RMarkdown, and it seems silly to learn something that is already out of date. Almost everything you see related to RMarkdown will work without any adjustment in Quarto.\nIn fact, if you see example documents with the extension .Rmd, you can change that to .qmd and it will probably run without any problem.\n\n\n\nThe structure of a Quarto document\nThere are four parts to a Quarto document:\n\nNarrative and document features using markdown, including headlines, subheads, images and other elements you’d normally see on a web page. You don’t have to write in HTML — Quarto writes it for you.\nThe “front matter”, or YAML, instructions for the entire document.\nCode chunks – your R computer code. This is the part that would go inside the R Scripts that you learned about in the last chapter’s video.\nThe results of code chunks - what you get back when you execute the code, including charts, graphs, tables and maps.\n\n\n\nMarkdown, an editing language\nQuarto is based on markdown3, which is used in many other contexts. Markdown was invented as an easy way for early Wikepedia editors, who were used to text editors like Word, to write simple documents that would automatically be rendered into the more complicated HTML of the web.\n\nLook through Quarto’s markdown guide and get a sense of its basic structure. You should be familiar with:\n\nText formatting, like bold and italic\nLinks\nHeadings\nLists (ordered and unordered)\nOptional: Tables\n\n\n\n\nFront matter / YAML at the top\nThe way the R knows how to process the page is by reading the very top of the file and looking at the section between three dashes. This is called “front matter”, and it’s extremely picky about indentations and the exact words you use.\nThe default setup is very basic. You can use options in this front matter to make it look a little more polished. Here is some code you can use instead of the default to make it look a little better, add a table of contents, and allow your readers to download the underlying code. It also embeds all of the images and data you use in your page in the final output so that you can share your html page through email without copying those external items.4\n\ntitle: \"A title for your page\"\nauthor: \"Your name\"\nformat: \n  html: \n    theme: cosmos\n    embed-resources: true\n    toc: true\n    codetools: true\n    page-layout: full\n\n\n\nIncluding R code and its results\nSo far, this is just a simple document. It doesn’t contain any R code. To add code, you insert a “code chunk”. You can add it by pressing the green “+C” button at the top of the document, or by pressing Option/Alt-Ctl-i .\nTo insert a code chunk:\n\nUse the +C button on the top right of your screen. ( )\nUse the keyboard shortcut Ctl-Alt-i / Cmd-Opt-i\n\n\n\n\nThe following code chunk creates a new variable called my_variable, another called my_name, then prints out the value stored in the my_name one. Copying it into your document will create a code chunk for you.\n\n```{r}\n# A hashtag here means the line is a \"comment\". R will ignore it.. \n# Anything between ```{r} at the beginning and ``` at the end is the code chunk. \n\n\n# create two new variables here\nmy_variable <- 13\nmy_name <- \"Sarah\"\n\n#now print out the one called my_name\nmy_name\n\n# this is the end of the code chunk\n```\n\n[1] \"Sarah\"\n\n\nThis might not seem like much, but think about how it helps you do your analysis. You can write all of your notes right where you do the work. You don’t have to copy and paste information from one place to another, or share out-of-date spreadsheets with your teammates.\n\n\nRendering a document\nThe document remains in markdown format until you render it. There are several ways to do that, most easily by pressing the “Render” button at the top of the page.\n\n\nWhen that button is pushed, Quarto converts your document to an HTML document that can be shared or published. It will be listed as a new file in your project:\n\n\n\n\n\nrendered files\n\n\n\n\n\n\nQuarto starts from scratch\nYou may have worked in a document for a while and saved a bunch of items in your environment.\nQuarto doesn’t care!\nEvery time it creates your document, it starts from a clean environment — everything you use must be created in the program itself, either by loading a package, importing some data, or doing some analysis. We’ll go through that later, but one good practice is to periodically clear your environment and run all of the code chunks from the top to make sure they don’t depend on anything else. You’ll do this in the walkthrough.\n\n\nSource vs. Visual modes\nRStudio lets you use what it calls “Visual” mode to hide the markdown code for you, and present you with a draft of what your document may look like. It also uses point-and-click methods to insert images and headings and other elements. For now, we should use the “Source” mode, which may not be the default for your machine. Later on it will be fine to switch back and forth, but the visual mode doesn’t work very well with the results of your commands so it’s worth understanding a little about what is going on behind the scenes.\n\n\n\n\n\n\nSwitching to Source mode\n\n\n\nRStudio usually creates a Quarto document in “Visual” mode, which hides the underlying coding from you and allows you to use point-and-click menus to structure your document.\nThis tutorial will have you switch to “Source” mode so that you can see the underlying structure.\n\nIn practice, visual mode makes data tables look all squished and difficult to navigate until you’ve rendered them. This is something we do a lot, so I end up working in the source document pretty frequently.\nYou can set up RStudio to default to source mode by changing the global options under Tools -> Global Options , then look for R Markdown, and the Visual tab."
  },
  {
    "objectID": "r-quarto.html#walkthrough---your-first-document",
    "href": "r-quarto.html#walkthrough---your-first-document",
    "title": "15  Using Quarto",
    "section": "Walkthrough - your first document",
    "text": "Walkthrough - your first document\nPractice by creating a new document with three things about yourself in a list, a picture of an animal you love or some other image you like, and a code chunk. This video goes through the steps while walking you through some of the details of creating projects, working with the screens and checking your work.\nHere are the steps:\n\nCreate a new Quarto document in the project you created above.\nFind an image of your favorite animal or another image you like, and save it in that project folder.\nSave the new Quarto document using the name yourlastname-firstquarto\nIn the document, delete all of the standard entry and replace it with:\n\nA subhed introducing a subtopic, called “About me”\nWithin that heading, a list of three things about yourself or about a topic you love, in a bulletted list.\nAnother subhed , called “An image I love”, with some text below it describing why you love it\nThe image that you saved into your project folder\nAnother subhed called “Some R code”\nA code chunk, in which you create a variable , assign it a value, and then print it out.\n\nRender the document to a final html file.\n\n\nExample document\n\nThere are several reasons it might not work:\n\nYou haven’t saved the document yet.\nThere is an error in that top YAML section. Copy the code above and try again. It’s really picky.\nThere is an error in your R code.\nEverything’s too smushed together. Give your document room to breathe by inserting blank lines between elements. When you first get started, switching to Visual mode will help you figure out where you might have gone wrong.\n\nHere is one I created about myself that you can use as a guide, but I implore you not to copy it – just use it as a guide if you have questions or if something is happening that you don’t expect. Here is a rendered version if you want to see how it translates into an HTML page: https://rpubs.com/cohensh/firstmarkdown"
  },
  {
    "objectID": "r-quarto.html#other-resources",
    "href": "r-quarto.html#other-resources",
    "title": "15  Using Quarto",
    "section": "Other resources",
    "text": "Other resources\n\nQuarto’s Getting Started guide\nHeiss’s video on R Markdown, which is very similar to Quarto. (13 minutes). It’s great about showing you the glitches you might run into. The differences between Quarto and RMarkdown are :\n\nThe output: html_document line should be format: html\nThe name of the file ends with .qmd, not .Rmd\nThe “knit” button is really a “render” button."
  },
  {
    "objectID": "r-data-import.html#the-data-frame",
    "href": "r-data-import.html#the-data-frame",
    "title": "16  Getting and saving data",
    "section": "The data frame",
    "text": "The data frame\nA data frame is an R variable1 and can be used and re-used like any other. The difference is that it contains columns and rows, just like a spreadsheet. These follow the rules we’ve seen about good, tidy Excel files:\n\nEach column contains one kind of information – race, sex, address, etc.\nEach row contains one example of each of those columns, all at the same unit of analysis. In other words, they each refer to the same noun.\n\nBefore you can use a data frame, you will have to import some data from a file on your hard drive or the web, or load some data that is saved in one of several R-specific formats. Most of the time, your data will originally come in a comma-separated text file (.csv), or in an Excel format (.xlsx). As you work on it, you’ll save it as an R data file that you’ve checked for mistakes and proper treatment of columns.\n\nExample data\nChristian McDonald, a data journalism professor at the University of Texas, has compiled a list of Billboard’s Hot 100 hits back to the 1950s, and made it available in his Github account. It’s a great example dataset because it has a lot of rows, a few columns, and few different data types. It’s also easy to understand. He has also made some tutorials using this data, and has generously offered it up for our use.\nWe’ll be using the data on McDonald’s Github repository at https://github.com/utdata/rwdir/blob/main/data-raw/hot100_archive.csv?raw=true\nHere is how he describes it:\n\nThe Billboard Hot 100 singles charts has been the music industry’s standard record chart since its inception on 8/2/1958. The rankings, published by Billboard Media, are currently based on sales (physical and digital), radio play, and online streaming. The methods and policies of the chart have changed over time.\n\n\nThe data we will use here is a combination of data collected by Kaggle user Dhruvil Dave, along with some scraping and merging by Prof. McDonald. It is stored on the code sharing website Github for safe keeping.\n\nHere is a data dictionary , sometimes called a record layout to go along with the data. You should look for, or create, something like this for every data source you use.\n\n\n\n\n\n\n\n\nvariable name\ntype\ndescription\n\n\n\n\nCHART WEEK\ndate\nThe release date of the chart\n\n\nTHIS WEEK\nnumber\nThe rank (1 through 100) of the song that week\n\n\nTITLE\ncharacter\nSong title\n\n\nPERFORMER\ncharacter\nPerformer, as published in the chart. There could be different spellings over time.\n\n\nLAST WEEK\nnumber\nLast week’s ranking\n\n\nPEAK POS.\nnumber\nHighest ranking ever on the Top 100 chart\n\n\nWKS ON CHART\nnumber\nNumber of weeks it has appeared on the chart, not necessarily consecutive.\n\n\n\nIt’s a good example for us, since there are no nuances to the data, and it contains a mix of words, numbers and dates. You won’t have to spend a lot of time studying it to understand what it is.\n\nNotice the upper-casing, the spaces and the period in the column names. This will be important later on."
  },
  {
    "objectID": "r-data-import.html#starting-a-new-r-program",
    "href": "r-data-import.html#starting-a-new-r-program",
    "title": "16  Getting and saving data",
    "section": "Starting a new R program",
    "text": "Starting a new R program\nEvery time you start a new R markdown document, you will need to load any packages you intend to use by editing the first code chunk in the default document, called the “setup chunk”.\nThen you will delete all of the boilerplate below the first code chunk.\n\nIf you are following along, it is assumed that you have created or opened a project to hold your new programs and data. Do that now if you haven’t. Mine is in my project called cohen-rlessons, inside my class folder.)\n\n\nCreate a new markdown document (the green plus sign at the upper left of your screen, or in the File menu) , and edit the setup chunk as shown below. If you want, copy and paste the YAML from the last lesson and replace the default options with that.\nSave your document as 01-top100.Rmd . I’m using the “01” prefix so that when I come back to this six months down the road, I know that this program has to be run first!\n\n\n\n\nsetup chunk\n\n\n\nI’ve created a template you can save in your project for this exercise , but I encourage you to use it as a guide rather than to copy-paste or just edit it. You should get in the habit of creating readable markdowns that document the how, what, why and where of your work.\n\n\nImporting the Hot 100 data file\nWhen you read in a CSV2 file, R will guess what each column is – text (words, called “character” or “chr” in R), numbers (“dbl” or “int” for “double-precision” or “integer”), and date/time (which have a couple of different possibilities that we’ll get into later on). 3\nData frames are most easily managed by keeping a few style rules in mind:\n\nColumn names should be all lower-case, and have no special characters. Separate words in a column name with an underscore.\nAny column containing numerals that you don’t plan to use in a math computation should be stored as a character type, not a number.4\n\nWe often have to tweak the data import to make sure of these things, or have to convert data types once they ’ve been imported. If you then save your data as an R data frame, you never have to do that again.\n\nCreate a new code chunk to read the top 100 dataset into a variable like this:\n\n\ntop100 <- \n  read_csv(\"https://github.com/utdata/rwd-billboard-data/blob/main/data-out/hot100_archive.csv?raw=true\")\n\nHere’s what that code does:\n\nCreates a new variable name, called top100, to pour the data into.\nUses a function of the tidyverse5 called read_csv, to\nAccess comma-separated text data held in McDonald’s github repository.\n\nWhen you run the chunk by pressing the green arrow within the code chunk, or press Shift-CMD-Enter , the output should look like this:\n\n\nRows: 330800 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): CHART WEEK, TITLE, PERFORMER\ndbl (4): THIS WEEK, LAST WEEK, PEAK POS., WKS ON CHART\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nSo R found:\n\n330,787 rows (or records, or observations).\nSeven columns ,\nThree of which it thinks are character types, and four that it thinks should be numbers.\nIt named the variables using the first row of the file.\n\n\nPro tip: if you’re not sure about the data types of each column, use an option to import them all as text, or character, columns. Then you can fix them one by one. Text will (almost) never be a problem. The option looks like this:\nread_csv( name_of_file, col_types=c(.default=\"c\") )\n\nIt’s also telling you how to get more information. Sometimes, this will say “Use problems() …”, meaning that something could have gone wrong and you should check it. We’ll see how to fix the column types at the same time as your import later on in the course.\n\nIf you want to import an Excel file, you have to use a slightly different library. You will have to load the readxl library in the setup chunk, then use the read_excel() function to access the data. It works similarly, but it’s a slightly different method.\n\nThere are a few ways to look at the data. First, you can look at the top and bottom of it using the head() and tail() commands:\n\nhead(top100)\n\n# A tibble: 6 × 7\n  `CHART WEEK` `THIS WEEK` TITLE             PERFORMER   LAST …¹ PEAK …² WKS O…³\n  <chr>              <dbl> <chr>             <chr>         <dbl>   <dbl>   <dbl>\n1 8/4/1958               1 Poor Little Fool  Ricky Nels…      NA       1       1\n2 8/4/1958               2 Patricia          Perez Prad…      NA       2       1\n3 8/4/1958               3 Splish Splash     Bobby Darin      NA       3       1\n4 8/4/1958               4 Hard Headed Woman Elvis Pres…      NA       4       1\n5 8/4/1958               5 When              Kalin Twins      NA       5       1\n6 8/4/1958               6 Rebel-'rouser     Duane Eddy…      NA       6       1\n# … with abbreviated variable names ¹​`LAST WEEK`, ²​`PEAK POS.`, ³​`WKS ON CHART`\n\n\nOr, you can look at a list of columns along with their types and a few examples from the top of the file using the glimpse() function, in this case listing the name of the data frame you want it to look at within the parentheses.^ [You may have noticed a pattern already: Function names are followed by parentheses, which leave room specifications, called arguments. Sometimes you don’t need any, so they’re blank]\n\nglimpse(top100)\n\nRows: 330,800\nColumns: 7\n$ `CHART WEEK`   <chr> \"8/4/1958\", \"8/4/1958\", \"8/4/1958\", \"8/4/1958\", \"8/4/19…\n$ `THIS WEEK`    <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, …\n$ TITLE          <chr> \"Poor Little Fool\", \"Patricia\", \"Splish Splash\", \"Hard …\n$ PERFORMER      <chr> \"Ricky Nelson\", \"Perez Prado And His Orchestra\", \"Bobby…\n$ `LAST WEEK`    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ `PEAK POS.`    <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, …\n$ `WKS ON CHART` <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n\n\nHere, you might notice that the names of some of the columns have back-ticks around them. That’s because they don’t follow our rules for column names – they should be lower case, with no spaces or special characters.\nYou can also explore a dataset by clicking on its name in the Environment tab. This is a good idea for exploring, but it can’t be replicated by your audience. It suffers from the same point-and-click problems that you ran into using spreadsheets. If you plan to use any of the results of that exploration, you’ll have to explicitly program them in the markdown."
  },
  {
    "objectID": "r-data-import.html#introducing-the-pipe",
    "href": "r-data-import.html#introducing-the-pipe",
    "title": "16  Getting and saving data",
    "section": "Introducing the pipe",
    "text": "Introducing the pipe\nYou’ll be seeing a lot of R code that has this format:\n  data_set_name %>%\n     verb ( nouns ) %>%\n     verb ( nouns ) %>%\n     etc...\nThat little symbol, %>% is called the “pipe”. It means “and then keep going to the next command”. It matches the way you think about algorithms from the programming appendix in this book.\n \nWe’re going to use two of the other libraries that we loaded at the top – lubridate and janitor to fix the two problems with this data, while showing you what the pipe does.\n\nAdd a code chunk that you’ll edit to clean the column names and types now.\n\nI try to build my code chunks one step at a time. These will show up as separate ones, but in practice I keep editing one that works until I get what I want.\nUsing a pipe can help make your code easier to read and write by separating each step into its own command. For example, glimpse(top100) does the same thing as top100 %>% glimpse(). The second version tells R, “Start with the top100 data frame and then glimpse it. Using small-ish datasets like this, I try to separate as much as is reasonable into separate steps because I can then troubleshoot problems one line at a time.\n\ntop100 %>%\n  clean_names()  %>%\n  glimpse()\n\nRows: 330,800\nColumns: 7\n$ chart_week   <chr> \"8/4/1958\", \"8/4/1958\", \"8/4/1958\", \"8/4/1958\", \"8/4/1958…\n$ this_week    <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ title        <chr> \"Poor Little Fool\", \"Patricia\", \"Splish Splash\", \"Hard He…\n$ performer    <chr> \"Ricky Nelson\", \"Perez Prado And His Orchestra\", \"Bobby D…\n$ last_week    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ peak_pos     <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ wks_on_chart <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n\n\nThis shows us that the function clean_names() converts the column names into our preferred style. Notice that we didn’t pour that answer into a new variable name, so it just prints the answer to the screen.\nOnce this works as expected, we can finish cleaning up the data.\nThis process uses the pipe to tack on new statements after each one is complete, and introduces the verbs of the tidyverse, which you’ll see in action in the next chapter.\nThese are two of the most important verbs you’ll use:\n\nselect, which picks and rearranges columns (kind of like filtering vertically)\nmutate, which lets you create new columns out of old ones. (like inserting a column in Excel and entering a formula)\n\nThe code chunk also uses function called mdy(), which stands for “month-day-year”, which in turn tells R that the character chart_week column starts out in that format, as opposed to year-month-day or something else.6\n\nYour final code chunk should look like this. Try to avoid copying and pasting, and instead build it one step at a time, running the chunk each time you add a phrase.\n\n(I usually add the variable name at the top last to save the data result for later use, after I’m sure everything has worked by printing it to the screen.)\n\ntop100_clean <- \n  top100 %>%\n  clean_names () %>%\n  mutate ( chart_date = mdy(chart_week)) %>%\n  select ( chart_date, title, performer, this_week, last_week,\n           wks_on_chart, peak_pos)\n\n\nSave your cleaned data in the tidyverse’s rds format in a code chunk like this:\n\n\nsaveRDS(top100_clean, file=\"hit100.RDS\")"
  },
  {
    "objectID": "r-data-import.html#what-we-did",
    "href": "r-data-import.html#what-we-did",
    "title": "16  Getting and saving data",
    "section": "What we did",
    "text": "What we did\n\nCreated a new R Markdown document and added the packages (libraries) we plan to use.\nImported a comma-separated text file from the web into a data frame called it top100.\nTook a look at it in several different ways.\nCreated a second data frame from the first, with names and dates fixed, with only some columns picked out and displayed in a new order.\nSaved it into the project for use in another program.\n\n\nWhat you should do next\nIf you’ve followed along, you should create text surrounding your code chunks that result in a clean, readable Markdown document that readers can follow from start to finish. Include:\n\nDocumentation of the source of your file.\nSub-headings for each of the steps\nIntroductory text describing what you are about to do\nMaybe: Some text after the chunks that describe meaningful output.\n\nIf you’re stuck, you can use the template I created as a starting point.\nKnit it early and often to make sure your program isn’t broken and that the output looks the way you expect.\n\n\nAnd breathe\nYou’ve now created a full, working R program in Markdown format that can serve as a model for everything you do in the future. Congratulate yourself and take a break!\n\n\n\nMax van den Oetelaar via Unsplash"
  },
  {
    "objectID": "r-data-import.html#postscript-understanding-file-types",
    "href": "r-data-import.html#postscript-understanding-file-types",
    "title": "16  Getting and saving data",
    "section": "Postscript: Understanding file types",
    "text": "Postscript: Understanding file types\nSo far in this book, you’ve been saved from having to understand the format of data as it is traded among people and computers. Now you’ll have to start understanding that there are different forms of data files, one of which is the simple Excel file that we’ve dealt with so far.\nBut Excel is a propriety format – it’s made by Microsoft and isn’t very easy to use without a program that can import it. As we’ve seen, it can also corrupt data by misunderstanding data types like dates and numbers, and there isn’t much control over its assumptions.\nThis section will go over the common data formats you’re likey to run across in your work with R. However, R is not limited to these. You’ll often find arcane and specialized data file formats if you work with statisticians or experts in geographic analysis that can also be read in R. There is almost always a package available that will import it.\n\nTabular text data\nIn Excel and Google Sheets, each page of a workbook is tabular, meaning it is approximately a rectangle. It might be a narrow and tall rectangle, or a short and wide rectangle, but it’s still a rectangle. Each column is an attribute or a variable, and each row is an observation or a record .\nEvery computer can read and write plain text. Those are the characters you can type on a typewriter, with no fancy formatting or other features that require special software to ingest it. We’ll normally be dealing with these. They usually come in two flavors:\n\nCSV data is “comma-separated values” data, which means that a new column will be created whenver a comma is encountered. If there is a chance that there might be a comma inside a column, it will be enclosed by quote marks. This usually works OK, but there are some times when you have to be careful because there could be commas AND quotes inside a column. (A good example is a column of peoples’ names – they may be something like Smith, Johnny \"The Rat\") To overcome this, some people use:\nTSV , or tab-separated data. In this case, the tab key determines the distinction between columns, which is much rarer to find in plain text files.\n\nHere’s what a CSV might look like listing the last few presidents:\n  name, position, start_date, age_at_start_date\n  \"Biden, Joe\", President, 2021-01-20, 78\n  \"Trump, Donald\", President, 2017-01-20, 70\n  \"Obama, Barack\", President, 2009-01-20, 47\nIt looks like a mess to you, but it’s a thing of beauty to a computer.\nSome government agencies just make up a delimiter instead of a comma or tab - I’ve seen them with vertical bars (|) and tildes ~. You would use the function read_delim() to import a text file delimited by something other than a comma.\n\n\nNon-tabular text data\nAnother common format you’ll see passed around from computer to computer is called JSON. This stands for Javascript Object Notation, and is commonly used to pass data over the web , often to your phone or your browser.\nIt looks even worse, but it’s also a thing of beauty to a computer. The same data would look like this in JSON:\n {\"presidents\": [\n    {\"name\": \"Biden, Joe\", \"position\": \"President\", \"start_date\": \"2021-01-20\", \n       \"age_at start_date\": \"78\"},\n    {\"name\": \"Trump, Donald\", \"position\": \"President\", \"start_date\": \"2017-01-20\", \n       \"age_at start_date\": \"70\"},\n    {\"name\": \"Obama, Barack\", \"position\": \"President\", \"start_date\": \"2009-01-20\", \n       \"age_at start_date\": \"47\"}\n   ]\n  } \n    \n\n\nData formats created for specific software\nR has its own data files, sort of like Excel files, which require no special handling when used within R, but can’t really be used in any other program.\nAlmost every programming language has a way to read Excel (.xlsx) files, but they sometimes don’t handle intricacies very well.\nFor now, we’ll just work with these kinds of files, but just remember that you’re likely to run into all different kinds. Get some help before just Googling when you find a new type – you’ll often get bad advice from the internet on this topic."
  },
  {
    "objectID": "appendix-math.html#the-pers-fractions-rates-percents-and-per-capita",
    "href": "appendix-math.html#the-pers-fractions-rates-percents-and-per-capita",
    "title": "Appendix A — Newsroom numbers cheat sheet",
    "section": "The PERS: Fractions, rates, percents and per capita",
    "text": "The PERS: Fractions, rates, percents and per capita\nYou can usually simplify your story if you can re-jigger your numbers into a rate, a ratio or a percentage. “One out of four” is a fraction, or a rate. “Forty percent” is another ratio or rate. And 235 deaths per 100,000 people is another.\nPercents and fractions are used to scale of very large or very small numbers while putting them into perspective.\nRates are also used to level the playing field – they compare two items that have a different base.\nWhen you see a lot of numbers in copy, examine them to see if a simple rate – “one of four” or 25 percent – would simplify your story.\n\nFractions and percents\nRepeat this: “Percents are fractions. Fractions are percents.” Remembering this all the time will keep you focused on the key element of percentages: They’re ratios, or rates, expressed as a fraction of 100.\n\nFiguring a percent:\nStep 1: Know your base. Think of the words “out of.” It’s the total of all the groups.\nStep 2: Divide the category you care about by the base.\nRemember that a fraction sign (/) means “divided by” (÷).\nStep 3: Move the decimal point two places to the right (or multiply by 100) to get the rate per hundred, or percent.\nStep 4: Round the answer to no more than one decimal place. Better\nyet, look for an easier fraction your readers will understand.\n\nFormula\nStep 1: Total = The base\nStep 2: (Category / Total) = Proportion\nStep 3: Proportion x 100 = Percent\nStep 4: Round and simplify.\n\nExample\nIf 58 people say they will vote in an upcoming election and 92 say they won’t, this is how to compute the percent of people who claim they will vote:\nStep 1: Base = number of people asked = 92 + 58 = 150\nStep 2: Rate = 58 out of 150 = 58/150 = .386666..\nStep 3: Percent = .38666… x 100 = 38.666666….\nStep 4: Round and simplify: = nearly 40 percent\n\n\n\nFrom fractions to percents and back\n\n\n\nYou probably know that 1 out of 4 is one-quarter, and that it’s also 25 percent. But you may not know how to get from one to another.\nFrom fractions to percents:\n1/4 = 1 ÷ 4 = 0.25. Move the decimal place over two places, or multiply by 100, to get 25%\nFrom percents to fractions:\n\nWrite your percent as a fraction: 25/100\nTry to find a “least common denominator:” 25 in this case goes into both the top and the bottom. You might want to round off either number to come out to a simple denominator.\nSimplify: (25 / 25) / (100 / 25) = 1 / 4\n\nTo get “One out of “ numbers:\n\nExpress your percentage as a proportion by dividing by 100, so 25% is 0.25.\nNow divide one by that number: 1 / .25 = 4, so your answer is one-fourth.\n\nTip for spreadsheet users: Excel allows you to format a number as a fraction or a percent. Play around with formats to see how the number is most easily described.\n\n\n\n\n\nRates and per capita\nAs with percentages, per person or per capita rates are used to level the playing field.\nThey’re often used when you need to compare two dissimilar places or events: Crimes in cities with different populations, deaths from various diseases or Gross Domestic Product across countries.\nRates also are often used with very big or very small numbers to change them into something we can understand.\nSometimes, though, a rate makes things more complicated, especially when events are rare and there is a consensus that they shouldn’t ever happen. Some examples include the 32 crashes attributed to GM’s faulty ignition switch, or the 64 deaths that the Centers for Disease Control associated with pharmacy compounding errors in 2012.\nOne rule of thumb is to use raw numbers when they are under 100, and revert to some kind of fraction or rate when they grow bigger.\n\nRates for large numbers\nA raw per-person figure is an average and should usually be used with very big numbers.\nA Gross Domestic Product of $17 trillion is hard to digest. So we reduce it to a number we can understand. If we divide it by 317 million, we get about $54,000 for every man, woman and child in the country. It doesn’t mean that each person earned $54,000 – in fact, almost half of all families earned less than that altogether at this writing. Instead, it includes all of the income that is generated by companies as well as people.\nBut the device turns an incomprehensible number into something we can picture. It also helps if we want to compare countries – it levels the playing field by adjusting for the size of the country.\n\n\nRates for small numbers - crime, death, and other rare events\nRates such as 23 per 1,000 people or something like it – are the same as percentages, but you multiply by something bigger than 100 or move the decimal place further to the right. Use these for very small numbers.\nIf 2.5 million people die in this country every year, then the percentage of people who die is a really small number: 0.789 per 100, or percent.\nA number that little is hard to digest. So experts up the ante and express the figure as 789 deaths per 100,000 people.\n\n\n\n\n\n\nSmall numbers warning\n\n\n\nBe careful about rates based on very small numbers. One example is the number of police shootings per 100,000 people. Most police departments in the country are very small and are more likely to serve only about 5,000 people. This means that just one shooting in the department can lift them from one of the lowest rates in the nation to one of the highest. Expect rates based on very small numbers to be unstable and potentially misleading.1\n\n\n\nFiguring a rate\nStep 1: Choose your base. This is often difficult. In reporting on fatalities by make of car, should you use the number of cars on the road, the number sold, or the total miles driven each year? You’ll have to decide.\nStep 2: Divide the number you care about by the base. Choosing the numerator can also be tricky. Going back to the automobile fatality example, would you use the total number of deaths or the number of driver deaths? Take a hint using other reports you see on the topic. Experts have often come to an informal agreement about what the most telling number is.\nStep 3: Multiply by a nice round number, such as 1,000, 100,000 or 1 million.\nStep 4: Round the answer and simplify.\n\nFormula\nStep 1: Choose the base, or “total”\nStep 2: (Category / Total) = Proportion or Rate\nStep 3: Proportion x 1,000 = Rate per thousand\nStep 4: Round to zero decimal places\n\nExample\nAccording to the FBI Crime in the United States for 2012, there were 13,000 violent and property crimes in Pittsburgh out of a population of 312,000. There were 8,870 crimes in Tucson out of a population of 531,000. Figuring a rate per thousand residents lets you compare the two cities:\n\n\n\n\n\n\n\nPittsburgh\nTucson\n\n\n\n\nStep 1: Base= 312,000 people\nStep 1: Base = 531,000 people\n\n\nStep 2: 13,000 crimes / 312,000 people = 0.041\nStep 2: 8,870 / 531,000 people = 0.017\n\n\nStep 3: 0.041 x 1,000 = 41 crimes per thousand\nStep 3: .017 * 1,000 = 17 crimes per thousand\n\n\n\nSo the crime rate for Pittsburgh was nearly 2 1/2 times that of Tucson that year , or 47/17 = 2.4\n\n\n\nSelecting your multiplier\n\n\n\nSome people feel that changing their multiplier from 100 to something bigger is cheating.\nAfter all, a 0.2 percent rate becomes a big number – 200 – when you change the base from 100 to 100,000!\nIn practice, though, there’s nothing magical about using a base of 100 (or percent). Instead, use the number that makes sense for the comparison you’re making.\n\nChoose a round number – 1,000, 1 million or 100,000.\nChoose the same number that the experts use: Crimes per 1,000 people, deaths per 100,000, or crashes per million miles driven, for example.\nChoose a base that will give you an easy way to express it to your readers. This is one that results in a number generally between 1 and 1,000 or so.\nTry to avoid using an outrageously large base. For instance, avoid expressing a local number in terms of 1 million people. Only a handful of cities have more than a million people.\nKeep the same base throughout your story. Don’t shift from 100,000 to 1,000 in crime statistics, for instance, when you move from murders to total crime rates.\n\nYou will often have to balance these rules of thumb against each other to come up with a compromise that allows you to write gracefully while keeping the sense of scale appropriate for the comparisons you’re making."
  },
  {
    "objectID": "appendix-math.html#measuring-change",
    "href": "appendix-math.html#measuring-change",
    "title": "Appendix A — Newsroom numbers cheat sheet",
    "section": "Measuring change",
    "text": "Measuring change\nWe often write about change or difference, usually as a difference between place or time.\n\nSimple differences\nA simple difference is just the result of subtracting one number from another. If you are measuring differences in time, it’s the newer number minus the older number.\nOne time to use a simple difference is when the number is understandable without any calculations. Prices of common household goods, salaries and home prices are examples of numbers that needn’t always be put into perspective using percentage changes.\nIn the end, we work in news. That means that sometimes you’ll use a raw number when it’s more newsworthy. This doesn’t necessarily mean the number is more alarming – just more meaningful.\n\nFiguring a difference:\nSubtract the older number from the newer number.\nThis is not the same as subtracting the little number from the big number.\nIf a number has fallen you get a negative number. If a number has risen you get a positive number.\nFormula\nNew – Old.\nExample An executive made $2.4 million last year. She made $2.9 million this year.\nHer raise was: $2.9 – $2.4 = 0.5 million, or $500,000, or half a million dollars."
  },
  {
    "objectID": "appendix-math.html#percent-change-percent-difference",
    "href": "appendix-math.html#percent-change-percent-difference",
    "title": "Appendix A — Newsroom numbers cheat sheet",
    "section": "Percent change / Percent difference",
    "text": "Percent change / Percent difference\nThe most butchered form of newsroom math is the percent difference, or the percent change.\nPart of the problem is that some folks have found five or six different ways to compute them. Unfortunately, only two of them work every time. I’ll show you both because sometimes – especially when you want to compare rates – one is easier than the other.\nNote that these methods work whether or not the number is going up or going down. If the number has fallen, you’ll get a negative answer. If the number has risen, you’ll get a positive one. And it still comes out right if the increase is bigger than 100 percent.2\nIn practice, I use Method 1 when I’m working in spreadsheets because I can look at the simple difference in one column and then use it in the formula for the percentage difference. I use Method 2 when I want to compare to percent changes to one another or when working with annual rates.\n\n\n\n\n Method 1: Subtract then divide\n\n\n\n Method 2: Divide then subtract\n\n\n\n\n\n\n\nFiguring a percent change\n\n\n\n\n Step 1: Get the simple difference between the numbers by subtracting the older number from the newer number. It doesn’t matter which one is bigger!\nStep 2: Divide the answer by the older number.\nStep 3: Multiply by 100, or move the decimal point two places to the right.\nStep 4: Round off and simplify.\n\n\n\n Step 1: Get the proportion of the new number compared to the old number. This is the same as the percent of total above, except the old number is the base.\nStep 2: Subtract 1 from that ratio\nStep 3: Multiply by 100, or move the decimal point two places to the right.\nStep 4: Round off and simplify.\n\n\n\n\n\n\n\n\n\nFormula\n\n\n\n\n Step 1: New – Old = Difference\nStep 2: Difference / Old = Decimal answer\nStep 3: Decimal x 100 = percentage difference\nStep 4: Round off.\n\n\n\n Step 1: New / Old = Ratio\nStep 2: Ratio - 1 = Decimal answer\nStep 3: Decimal x 100 = percentage difference\nStep 4: Round off.\n\n\n\n\n\n\n\n\nExample\n\nAn executive made $2.4 million last year. They made $2.9 million in this year.\n\n\nStep 1: Difference = 2.9 – 2.4 = 0.5\nStep 2: Difference / Original number =  0.5 / 2.4 = .208\nStep 3: Move the decimal point = 20.8%\nStep 4: Round off and simplify:  21% = 21 / 100 = about 20 / 100 = or about one-fifth.\n\n\n\nStep 1: Ratio = 2.9/2.4 = 1.208\nStep 2: Decimal answer = 1.208 - 1 = .208\nStep 3: Move the decimal point = 20.8%\nStep 4: Round off and simplify:  21% = 21 / 100 = about 20 / 100 = or about one-fifth.\n\n\nSo the executive got a raise equivalent to one-fifth of their original salary.\n\n\n\n\n\n\n\n\nReversing or predicting a percent change\n\n\n\nRemember that a number can grow many times, but it can only fall 100 percent to zero. This is a rough concept until you think it through. If you double a price of $20, increasing it by 100%, it’s $40. If you triple it, it’s $60. But if you reduce the $40 back to $20, it’s a 50 percent drop, to one-half the level, not a 100 percent decrease. In other words, percent changes can’t be reversed.\nThis means that the ads claiming you’ll use three times less detergent or a food contains three times less salt are wrong and impossible. What they probably mean is that it would be three times as much if you used the other brand or ate the other food, or the brand is one third as much. Here are two ways this makes a difference:\nYou need two of three numbers to reverse or predict a percent change:\n\nWhere the number started\nWhere it ended\nWhat the percent change would (or will) be\n\nAny two of those will give you what you need. It’s easiest if we use Method 2 above to get there. The example above assumes you know where it started and where it ended. Here’s how to do it if you you have either of the other two:\nWhere it starts and the percent change\nExample: You started with $100 and it grew by a total of 12%. Or, you started with $100 and it fell by a total of 12% (the percent change was -12%)\nStep 1: Convert the percent change to a ratio by moving the decimal place back : .12 (up) or -.12 (down)\nStep 2: Add 1, resulting in 1.12 (up) or .88 (down)\nStep 3: Multiply the beginning number by that amount : $100 x 1.12 = $112 (up), or $100 x .88 = $88 (down)\nWhere it ends and the total percent change\nFor example, say your house is worth $330,000, and it had appreciated by a total of 15% over the past few years. Here’s how to figure out where it started:\nStep 1: Convert the percent change to a decimal, as above: 0.15\nStep 2: Divide the current value by that amount = $330 / .15 = $287\nThis isn’t intuitive, but it differs because you’re starting from a bigger base. 15 percent of 330 isn’t the same as 15 percent of 287.\n\n\n\n\n\n\n\nGoing further with percents and rates\nThere are three common problems in changes and rates you will probably encounter that aren’t part of this guide. You should get help or look it up when these situations come up: 3\n\nRelative risk: That’s the technical term for dividing two percentages. If the mortgage denial rate for Black homeowners was 10 percent, and the denial rate of white homeowners was 5 percent, it means that Black homeowners are twice as likely to be denied a loan. This can be used with both rates and with changes.\nAnnual rates: When you know that something has grown, say, 2 percent a year for 10 years, it’s not the same thing as 20 percent. You have to annualize it.\nAdjusting for inflation: Comparing values across two points in time – especially today – means putting them on the same footing. Generally, you want to convert old values to their buying power today. For example, it’s hard to compare salaries for teachers today with those 50 years ago, because our money isn’t worth as much today."
  },
  {
    "objectID": "appendix-math.html#average-and-typical-values",
    "href": "appendix-math.html#average-and-typical-values",
    "title": "Appendix A — Newsroom numbers cheat sheet",
    "section": "Average and typical values",
    "text": "Average and typical values\nAverages4 are just summaries. If a quote sums up an event, or an anecdote sums up a person using their actions instead of words, an average sums up a human condition of some kind – money, congestion, death or disease – in a single number.\nChoosing your average carefully or deciding there may be another number or method to sum up a situation can mean the difference between accurately and inaccurately describing your story.\nUnderstanding different kinds of “measures of central tendency” – what they tell us and what they don’t – is the first thing you learn in basic statistics classes. If an it doesn’t describe your data well, it’s not very productive to move forward into many other kinds of analysis.\nTrying to compare populations over time is particularly tricky using averages because of giant demographic shifts. Between the Baby Boom and the Millennials came what some people call the Baby Bust. Getting average spending on education, for example, across these generations is really misleading – it will boom, then bust, them boom again and no one number will describe that pattern.5\nTwo types of averages are reviewed here. Consult an introductory statistics book if your work depends on an average.\n\nThe average or mean\nA “mean” is what people mean when they say the word “average”.\nIt’s most descriptive when it summarizes numbers that don’t vary too much at either the top or bottom ends. These averages will often be misleading when they refer to items measured in dollar amount like incomes, housing costs and the like.\n\nFiguring a simple average or mean\nStep 1: Add up a list of numbers.\nStep 2: Divide the answer by the number of numbers you’ve added up.\nFormula\nStep 1: Sum of numbers\nStep 2: Sum / Count of numbers\nFor spreadsheet users: =AVERAGE(list of numbers)\nExample\nHere are six home prices on a block:\n$275,000          $1,200,000\n$275,000            $500,000\n$200,000            $395,000\n\nStep 1: 275 + 275 + 200 + 1,200 + 500 + 395 = 2,845 or $2,845,000\nStep 2: $2,845,000 / 5 = $569,000.\nSo the average home price is more than all but one on the list.\n\n\n\nThe median\nMedians are often used to summarize the value of things measured in dollars, especially home prices and incomes. They are not sensitive to one or two unusually high or low values the way the average in the previous example is.\nBut it’s harder to get a median because you need a list of all values. For example, if you know the total income of a metropolitan area and the number of people in that area, you can compute the average – or per capita income – but not the median.\nOne way to express the median is to call it the “typical” value. Another way is to say that it’s the “middle” value.\n\nFiguring a median:\nStep 1: List all of your numbers in order, beginning with the lowest and ending with the highest.\nStep 2: Count how many numbers you have and divide by two.\nStep 3: Add 0.5. If that comes out to a whole number (like 13), count up the list that many values.\nIf it’s not (like 12.5), take the average of the two numbers surrounding the number. 6\nIn other words, this is the closest you can get to the middle of the list. This is a sorting and counting job, not a calculator job.\nIn a spreadsheet, use the =MEDIAN() function.\nExample:\nStep 1:\nThe same list, but listed from lowest to highest, with an extra expensive home\n1.    $200,000\n2.    $275,000      \n3.    $275,000      \n4.    $395,000\n5.    $500,000\n6.  $1,200,000\nStep 2: 6/2 = 3\nStep 3: 3 + .5 = 3.5\nStep 4: Average the 3rd and 4th items on the list: (275 + 395) / 2 = $335,000\n\nAs a rule of thumb, the median will be more telling than the average when they’re very different as in this example. But the word “median” sounds very technical to some readers and the average encompasses all of the values in a list, so we use it when they’re not too different."
  },
  {
    "objectID": "appendix-program.html#building-blocks",
    "href": "appendix-program.html#building-blocks",
    "title": "Appendix B — A gentle intro to programming",
    "section": "Building blocks",
    "text": "Building blocks\nOnce you learn to program in one language, learning others is much simpler. That’s because you have the basic concepts down: How to assign values to variables, how to loop through lists, or how to import data. This chapter walks through some of the more universal concepts in programming.\n\nVariables\nVariables are just containers with names. Variables an be simple, such as a variable that holds the value, “Sarah”. Or they can be quite complex, such as a multi-level data frame containing details from a Spotify playlist. Some people call them objects.1\n\nLiterals\nThe most basic kind of object is a single variable that contains a single value of a specific type:\n \"Sarah\"\n 1.0\n TRUE\n 2017-01-24\nThese are called “literals”, which usually include text, numeric, logical (usually true/false but sometimes yes/no or 1/0) and date or date/time. When you want to use the actual letters of some text, enclose them in quotes. When you want to use the named variable, don’t enclose it in quotes. 2\nLists / arrays / vectors\nMost languages have some concept of a list of items called an array, vector or dictionary. In R, you create a vector using the “c” operator, short for “combine”. Once you have your items in a list or a vector, you can apply the same function across all of them or work on them in order.\nc(1, 2, 3, 4, 5) \n  creates a vector of the values 1 through 5 in R\nData frames or tables\nA data frame is a special version of a list, and is equivalent to a spreadsheet: tabular, rectangular data with columns and rows. You don’t need to know much about this yet, but just understand that it will become an important part of your vocabulary.\n\n\n\nOperators & assignment\nOperators are simple arithmetic or similar operations, like adding, subtracting, dividing and multiplying. Some common operators are:\n   Arithmethic: add (+), subtract (-), multiply (*), or divide (/).\n\n   Comparison: Greater than (>) , less than (<), \n                equal to (often == ),\n                not equal to (often !=).\n“Assignment” means pushing a value into a variable name using “<-”. It’s amazing how many different ways there are to think of this. Some might call “naming a value”, others might consider it “setting a variable”.\n  my_name <- \"Sarah\"\n  my_value <- 1.0\n\n\nFunctions\nA function is a set of instructions. To use a function, you use its name, followed by some parentheses. If it requires information from you, those arguments go inside the parentheses.\nIf you think of it as a sentence, the function is the verb, and the arguments are the nouns. You used a function in Excel:\n=SUM(A1:A15)\nFunctions are usually categorized by the type of data element that they act upon. An example in R is the function tolower(), which converts a text or character variable inside the parentheses to lower case.\nMany of the functions we use are already built into R, or are in libraries that we borrow – someone else has already written, tested and packaged them up for you.\nExamples include:\n\nimporting text or Excel data\ncalculating the average or sum\ncounting\nfinding phrases within text\n\n\n\nLoops\nA loop is a way to repeat your instructions over and over without having to re-write them every time. They usually work by stepping through some kind of a list, like a directory of files, or by using a counter, such as every year between 2005 and 2018.\nExcel and Google Sheets don’t really have loops, unless you learn the more complicated programming language behind them. This is why many people move to a programming langugate – to get the power of loops.\nOne type of loop commonly used in programs is a “for loop”, which says, “for every one of something, follow these instructions”:\n\n\nFor loops aren't always scary monsters. Conceptual intro (no, this code won't run…) to for loops. Thanks @ChelseaParlett for brainstorming w/ me on this one! pic.twitter.com/TySFHogG2d\n\n— Allison Horst (@allison_horst) August 4, 2020\n\n\nCommon tasks that reporters do with loops include combining annual spreadsheets from a government website or downloading and importing many files at once; and scraping web pages that require clicking into each link one by one. We’ll get to this at the end of the semester.\n\n\n\nIngredients by Katie Smith via Unsplash"
  },
  {
    "objectID": "appendix-program.html#an-algorithm-to-make-an-omelet",
    "href": "appendix-program.html#an-algorithm-to-make-an-omelet",
    "title": "Appendix B — A gentle intro to programming",
    "section": "An algorithm to make an omelet",
    "text": "An algorithm to make an omelet\nAlgorithms are just instructions that get followed in order. If you brush your teeth the same way every morning, you can probably write out the steps as an algorithm.\nSuppose you want to make an omelet. Before you even start, you need to know at least two things: which ingredients you have on hand, and what kind of omelet you want to make.\nA function or algorithm that creates an omelet might look something like this. The first row creates a function called make_omelet(), which requires the two pieces of information as arguments. Once you’ve made the function, you can refer to that set of instruction by its name by giving it the arguments it needs.\n(All of these examples are called “pseudo-code”. They won’t actually work in any program, but they lay out the logic that has to be translated into the specific computer language you’re using.)\nfunction make_omelet (ingredients_on_hand, what_kind) {\n\n     check for necessary ingredients (are all elements of what_kind in ingredients_on_hand?)\n         quit now if you don't have them all.\n         return the error message\n\n     prepare the ingredients for (what_kind)\n\n     whisk the eggs\n\n     melt some butter in a pan\n\n     pour in the eggs\n\n     add ingredients for what_kind\n\n     flip the omelet\n\n     remove from pan\n\n     give me the omelet \n\n}\nNow, when you want to make an omelet, you can just make your list of ingredients and the kind of omelet you want, and execute the function:\nHere are the ingredients I already have:\ningredients <-\n        c(\"butter\", \"eggs\", \"cheese\", \"spinach\", \"tomatoes\")\nI want a spinach and cheese omelet:\nkind <-\n        c(\"spinach\", \"cheese\")\nNow, use the function we created to make it using those two lists as the required arguments:\nmake_omelet (ingredients, kind)\nWhen you use a built-in function in R, it will show you the arguments that are both required and optional as you type.\n\nOpen a restaurant with loops\nNow, you’d have to repeat this over and over if you had a restaurant. It might look like this:\n  make_omelet (ingredients,kind)\n  ** make a new list of ingredients left and the kind**\n  make_omelet (ingredients2, kind2)\n  ** make a new list...**\n  make_omelet (ingredients3, kind3)\n  ... and so on.\nYou’d have a program hundreds of lines long – one for each customer. Instead, you could loop through the customers and do the same thing:\ncustomers <- c(\"Bob\", \"Jamal\", \"Christine\", \"Lauren\")\n\nfor each customer in the list of customers {\n  request what kind they want\n  make_omelet (ingredients_on_hand, kind_this_customer_wants)\n  give omelet to customer\n  update your ingredients list if you ran out of something or went shopping\n}"
  },
  {
    "objectID": "appendix-program.html#more-resources",
    "href": "appendix-program.html#more-resources",
    "title": "Appendix B — A gentle intro to programming",
    "section": "More resources",
    "text": "More resources\n\n“Beyond Binary, Lesson 1 from a Google engineer’s drag queen persona named Anna Lytical. This video gives you a good handle on what a computer program does."
  },
  {
    "objectID": "appendix-ppp.html#sources",
    "href": "appendix-ppp.html#sources",
    "title": "Appendix C — Documentation for PPP data chapters",
    "section": "Sources",
    "text": "Sources\nAll data used in this book was downloaded as of January 2022 from the SBA data site at https://data.sba.gov/dataset/ppp-foia .\nThe data dictionary is distributed at that same site at https://data.sba.gov/dataset/ppp-foia/resource/aab8e9f9-36d1-42e1-b3ba-e59c79f1d7f0 in an Excel spreadsheet.\nHere is some other background information on the program: https://www.sba.gov/funding-programs/loans/covid-19-relief-options/paycheck-protection-program\nThe data was downloaded using a program to concatenate all of the files into one, large data frame. Only minimal standardization and cleaning was done:\n\nAll recipient names are in upper case, and periods were removed.\nAll city names are in proper case.\n\nPPP loans have two geographic locations included: The location of the borrower, and the city, county, state and congressional district of the project that is being funded. This is especially important for construction and similar trades that have work done on sites.\nMost PPP loans were given 24 months to either repay the debt or request forgiveness. None of them have yet met their maturity date, so none are “charged off” or written off by the SBA.\nArizona loans were extracted if either the borrower or the project was in the state. It contains 169,268 loans."
  },
  {
    "objectID": "appendix-ppp.html#data-used-in-the-tutorials",
    "href": "appendix-ppp.html#data-used-in-the-tutorials",
    "title": "Appendix C — Documentation for PPP data chapters",
    "section": "Data used in the tutorials",
    "text": "Data used in the tutorials\nThe columns were renamed and then a selection of those columns were used in the tutorials.\nThe files referenced in the tutorials have a selection of columns used out of this list:\n\n\n\n\n\n\n\n\nColumn name\nType\nDescription\n\n\n\n\nloan_number\nnumeric\nThe original, unique loan number that was provided by SBA\n\n\ndate_approved\ndate\n\n\n\ndraw\nchr\n“First” draw was April 2020-May 2020. “Second” draw was Jan 2021 to May 2021.\n\n\nborrower_name\nchr\nAll upper-case name of the borrower, with punctuation removed.\n\n\nborrower_address\nchr\nAll proper-case, punctuation removed\n\n\nborrower_city\nchr\nAll proper-case, punctuation removed\n\n\nborrower_state\nchr\n2-character upper case postal code\n\n\nborrower_zip\nchr\nfive-digit zip code of the borrower\n\n\nfranchise_name\nchr\nA “franchise” is a licensed outlet of a larger corporation, such as a McDonald’s store.\n\n\nloan_status\nchr\n“Paid in Full”, “Active Un-Disbursed” , “Charged Off”, or “Exemption 4”. . Exemption 4 means that it is still active and has time to apply for forgiveness or payback.\n\n\nloan_status_date\ndate\n\n\n\namount\nnumeric\nThe most recent amount approved by the SBA for this loan\n\n\nforgiveness_amount\nnumeric\nThe amount forgiven in the loan (paid by taxpayers, not the business). This is NA if it has not been forgiven.\n\n\nforgiveness_date\ndate\nthe date the loan was forgiven. NA if it has not been forgiven.\n\n\nlender\nchr\nThe name of the original lender. It might have been transferred to another company for further servicing.\n\n\nrural_urban\nchr\n“U” = Urban, “R” = “Rural” The federal governemnt prioritizes loans to rural areas.\n\n\nlow_income_area\nchr\n“Y” or “N”. These are areas that are considered low-to-moderate income communities that are priorities for the federal government to help finance.\n\n\nproject_county\nchr\nupper-case name of the county that the project is in.\n\n\nproject_state\nchr\n2-character postal abbreviation for the project city\n\n\nproject_cong_dist\nchr\na 5-character congressional district indicator, such as “AZ-04”\n\n\nemployees\nnum\nThe number of employees used to compute the loan.\n\n\nbusiness_type\nchr\nOne of 24 categories of business, such as “501(c)3 - Non Profit” or “Corporation” or “Sole Proprietership”\n\n\nnaics_code\nchr\nA 6-digit code indicating the industry of the recipient or project. This will be translated into words using another data set.\n\n\n\nThere were other columns in the original data set, but many of them were almost never filled in, or were shown to be inaccurate estimates. For example, out of nearly 170,000 loans, 120,000 of them had no information on race or ethnicity of the business owner. None were marked as veteran-owned or had an owner’s gender filled out. Some other columns, such as the current lender (as opposed to the one that made the loan) added complexity without adding much for our purposes."
  }
]